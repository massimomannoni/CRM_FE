[{"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\index.tsx":"1","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\serviceWorker.ts":"2","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\App.tsx":"3","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\menu\\menuItems.tsx":"4","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\components\\Page.tsx":"5","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\routes.tsx":"6","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\layouts\\DashBoardLayout\\index.tsx":"7","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\layouts\\MainLayout\\index.tsx":"8","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Report\\DashboardView\\index.tsx":"9","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\services\\constants\\appEndpoints.tsx":"10","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\companies\\companySlice.ts":"11","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\services\\constants\\global.tsx":"12","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\app\\store.ts":"13","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\app\\rootReducer.ts":"14","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\toasters\\toastersSlice.ts":"15","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\alert\\dialog.tsx":"16","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\ListView\\index.tsx":"17","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\index.tsx":"18","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\CreateView\\index.tsx":"19","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\ListView\\Toolbar.tsx":"20","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\ListView\\DataGrid.tsx":"21","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\baseCompanyform.tsx":"22","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\addressCompany\\index.tsx":"23","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\index.tsx":"24","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\Toolbar.tsx":"25","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\DataGrid.tsx":"26","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\addressCompany\\Toolbar.tsx":"27","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\addressCompany\\DataGrid.tsx":"28","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\contactTypes\\contactTypesSlice.ts":"29","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\addressTypes\\adrressTypesSlice.ts":"30","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\genericDialog\\dialog.tsx":"31","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\employeeContacts\\Toolbar.tsx":"32","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\employeeContacts\\index.tsx":"33","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\employeeContacts\\DataGrid.tsx":"34","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\activityTypes\\activityTypesSlice.ts":"35","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\activityCompany\\index.tsx":"36","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\activityCompany\\Toolbar.tsx":"37","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\activityCompany\\DataGrid.tsx":"38","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\sectorTypes\\sectorTypesSlice.ts":"39","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\dimensionCompany\\index.tsx":"40","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\dimensionTypes\\dimensionTypesSlice.ts":"41","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\dimensionCompany\\DataGrid.tsx":"42","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\dimensionCompany\\Toolbar.tsx":"43","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeOverViewCompany\\index.tsx":"44","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeOverViewCompany\\Toolbar.tsx":"45","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeOverViewCompany\\DataGrid.tsx":"46","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\filters\\filtersSlice.ts":"47","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\services\\configs\\config.tsx":"48"},{"size":544,"mtime":1612853702115,"results":"49","hashOfConfig":"50"},{"size":5424,"mtime":499162500000,"results":"51","hashOfConfig":"50"},{"size":279,"mtime":1613332020661,"results":"52","hashOfConfig":"50"},{"size":861,"mtime":1620556688879,"results":"53","hashOfConfig":"50"},{"size":464,"mtime":1620140844307,"results":"54","hashOfConfig":"50"},{"size":1089,"mtime":1621186396454,"results":"55","hashOfConfig":"50"},{"size":4826,"mtime":1612812832289,"results":"56","hashOfConfig":"50"},{"size":4842,"mtime":1612034997454,"results":"57","hashOfConfig":"50"},{"size":251,"mtime":1620139631010,"results":"58","hashOfConfig":"50"},{"size":1723,"mtime":1620066215543,"results":"59","hashOfConfig":"50"},{"size":23095,"mtime":1621241313507,"results":"60","hashOfConfig":"50"},{"size":367,"mtime":1620067062130,"results":"61","hashOfConfig":"50"},{"size":375,"mtime":1612853876179,"results":"62","hashOfConfig":"50"},{"size":1151,"mtime":1620138454770,"results":"63","hashOfConfig":"50"},{"size":1194,"mtime":1620138207427,"results":"64","hashOfConfig":"50"},{"size":1022,"mtime":1616347709466,"results":"65","hashOfConfig":"50"},{"size":2755,"mtime":1620140830887,"results":"66","hashOfConfig":"50"},{"size":5443,"mtime":1620066475808,"results":"67","hashOfConfig":"50"},{"size":12456,"mtime":1621241586051,"results":"68","hashOfConfig":"50"},{"size":2144,"mtime":1620139534021,"results":"69","hashOfConfig":"50"},{"size":4039,"mtime":1620040786476,"results":"70","hashOfConfig":"50"},{"size":12617,"mtime":1620039872192,"results":"71","hashOfConfig":"50"},{"size":1196,"mtime":1616359206527,"results":"72","hashOfConfig":"50"},{"size":1330,"mtime":1620057349456,"results":"73","hashOfConfig":"50"},{"size":8393,"mtime":1617548742278,"results":"74","hashOfConfig":"50"},{"size":7309,"mtime":1619974810242,"results":"75","hashOfConfig":"50"},{"size":7495,"mtime":1619974348941,"results":"76","hashOfConfig":"50"},{"size":5072,"mtime":1616347873336,"results":"77","hashOfConfig":"50"},{"size":3102,"mtime":1621187361852,"results":"78","hashOfConfig":"50"},{"size":3102,"mtime":1620551554668,"results":"79","hashOfConfig":"50"},{"size":965,"mtime":1616344146870,"results":"80","hashOfConfig":"50"},{"size":7763,"mtime":1617548701989,"results":"81","hashOfConfig":"50"},{"size":1203,"mtime":1617086452025,"results":"82","hashOfConfig":"50"},{"size":5171,"mtime":1617086492918,"results":"83","hashOfConfig":"50"},{"size":3131,"mtime":1620551542643,"results":"84","hashOfConfig":"50"},{"size":1209,"mtime":1617639696340,"results":"85","hashOfConfig":"50"},{"size":9367,"mtime":1619968175790,"results":"86","hashOfConfig":"50"},{"size":5670,"mtime":1617776957303,"results":"87","hashOfConfig":"50"},{"size":3072,"mtime":1620551524925,"results":"88","hashOfConfig":"50"},{"size":1354,"mtime":1620039977738,"results":"89","hashOfConfig":"50"},{"size":3162,"mtime":1620551582743,"results":"90","hashOfConfig":"50"},{"size":5113,"mtime":1620031637586,"results":"91","hashOfConfig":"50"},{"size":8528,"mtime":1620040000432,"results":"92","hashOfConfig":"50"},{"size":1308,"mtime":1620066428025,"results":"93","hashOfConfig":"50"},{"size":7743,"mtime":1620067549117,"results":"94","hashOfConfig":"50"},{"size":5327,"mtime":1620067253528,"results":"95","hashOfConfig":"50"},{"size":1115,"mtime":1620138414305,"results":"96","hashOfConfig":"50"},{"size":594,"mtime":1620589360363,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"ppxlaq",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":1,"source":"124","usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135","usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"100"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"100"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"100"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\index.tsx",[],["221","222"],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\serviceWorker.ts",[],["223","224"],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\App.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\menu\\menuItems.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\components\\Page.tsx",["225"],"import React, { forwardRef } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\ninterface ICallerProps {\r\n  children : any,\r\n  title : string,\r\n  className : string\r\n}\r\n\r\nconst Page = React.forwardRef(({ className = '' , children,title = '', ...rest} : ICallerProps , ref :any) => {\r\n  return (\r\n    <div ref={ref} {...rest} >\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Page;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\routes.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\layouts\\DashBoardLayout\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\layouts\\MainLayout\\index.tsx",["226"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems } from '../../features/menu/menuItems';\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function MainLayout() {\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            Dashboard\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>{mainListItems}</List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n          {/* maxWidth=\"lg\" */}\r\n          <Container className={classes.container} maxWidth={false}>\r\n          <Outlet />\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Report\\DashboardView\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\services\\constants\\appEndpoints.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\companies\\companySlice.ts",["227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259"],"\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { Company, CompanyAddress, EmployeeContact as EmployeeContact, CompanyEmployee, CompanyActivity, CompanyDimension, CompanyEmployeesOverView } from '../../app/ITypes';\r\nimport { AppThunk } from '../../app/store';\r\nimport { config } from '../../services/configs/config';\r\nimport { ENDPOINTS } from '../../services/constants/appEndpoints';\r\n\r\nexport interface CompanyState  {\r\n    list: Company[];\r\n    loading: boolean,\r\n    errors: string,\r\n    listWithDetails : Company[]\r\n    loadingAddress: boolean, \r\n    loadingActivity: boolean, \r\n    loadingEmployeeContact: boolean,\r\n    loadingEmployee: boolean,\r\n    loadingDimension : boolean\r\n    loadingEmployeesOverView : boolean\r\n }\r\n\r\nconst initialState: CompanyState = {\r\n    list: [],\r\n    loading: false,\r\n    errors:'',\r\n    listWithDetails:[],\r\n    loadingAddress: false,\r\n    loadingActivity: false,\r\n    loadingEmployeeContact: false,\r\n    loadingEmployee: false,\r\n    loadingDimension: false,\r\n    loadingEmployeesOverView: false\r\n}\r\n\r\ninterface CompanyAddressResponse {\r\n  companyId : string;\r\n  addresses? : [CompanyAddress]\r\n}\r\n\r\ninterface CompanyActivityResponse {\r\n  companyId : string;\r\n  activities? : [CompanyActivity]\r\n}\r\n\r\ninterface CompanyDimensionResponse {\r\n  companyId : string;\r\n  dimensions? : [CompanyDimension]\r\n}\r\n\r\ninterface CompanyEmployeeResponse {\r\n  companyId : string;\r\n  employees? : [CompanyEmployee]\r\n}\r\n\r\ninterface CompanyEmployeesOverViewResponse {\r\n  companyId : string;\r\n  employeesOverViews? : [CompanyEmployeesOverView]\r\n}\r\n\r\n\r\nconst CompaniesSlice = createSlice({\r\n    name : \"companies\",\r\n    initialState,\r\n    reducers: {\r\n        setLoading : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload\r\n        },\r\n\r\n        setLoadingAddress : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loadingAddress = payload\r\n        },\r\n\r\n        setLoadingActivity : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loadingActivity = payload\r\n        },\r\n\r\n        setLoadingDimension : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loadingDimension = payload\r\n        },\r\n\r\n        setLoadingEmployeesOverView : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loadingEmployeesOverView = payload\r\n        },\r\n\r\n        setLoadingEmployeeContact : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loadingEmployeeContact = payload\r\n        },\r\n\r\n        setLoadingEmployee : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loadingEmployee = payload\r\n        },\r\n\r\n        setErrors :(state, {payload} : PayloadAction<string>) => {\r\n          state.errors = payload;\r\n        },\r\n\r\n        setCompanies :(state, {payload} : PayloadAction<Company[]>) => {\r\n          state.list = payload;\r\n        },   \r\n\r\n        setCompananiesDetails :(state, {payload} : PayloadAction<Company>) => {\r\n\r\n          const listWithDetails = companiesDetailsSelector(state);\r\n\r\n          const companyIndex = listWithDetails.findIndex(x => x.id == payload.id);\r\n          \r\n          if (companyIndex !== undefined)\r\n            listWithDetails.splice(companyIndex, 1);\r\n\r\n          let companiesDetails = listWithDetails;\r\n          companiesDetails.push(payload);\r\n\r\n          state.listWithDetails= companiesDetails;\r\n        },   \r\n\r\n        delCompany :(state, {payload} : PayloadAction<string>) => {\r\n          state.list = state.list.filter(x => x.id != payload)\r\n        }, \r\n\r\n        setCompanyAddresses : (state, {payload} : PayloadAction<CompanyAddressResponse>) => {\r\n\r\n          const listWithDetails = companiesDetailsSelector(state);\r\n          \r\n          let companyDetails = listWithDetails.find(x => x.id == payload.companyId);\r\n          if (companyDetails != undefined)\r\n          {\r\n            companyDetails.addresses = payload.addresses;\r\n\r\n            // delete company details\r\n            const companyIndex = listWithDetails.findIndex(x => x.id == payload.companyId);\r\n\r\n            if (companyIndex !== undefined)\r\n              listWithDetails.splice(companyIndex, 1);\r\n            \r\n            listWithDetails.push(companyDetails)\r\n          }  \r\n\r\n          state.listWithDetails = listWithDetails\r\n          state.loadingAddress = false\r\n        },\r\n\r\n        setCompanyActivities : (state, {payload} : PayloadAction<CompanyActivityResponse>) => {\r\n\r\n          const listWithDetails = companiesDetailsSelector(state);\r\n          \r\n          let companyDetails = listWithDetails.find(x => x.id == payload.companyId);\r\n          if (companyDetails != undefined)\r\n          {\r\n            companyDetails.activities = payload.activities;\r\n\r\n            // delete company details\r\n            const companyIndex = listWithDetails.findIndex(x => x.id == payload.companyId);\r\n\r\n            if (companyIndex !== undefined)\r\n              listWithDetails.splice(companyIndex, 1);\r\n            \r\n            listWithDetails.push(companyDetails)\r\n          }  \r\n\r\n          state.listWithDetails = listWithDetails\r\n          state.loadingActivity = false\r\n        },\r\n\r\n        setCompanyEmployees : (state, {payload} : PayloadAction<CompanyEmployeeResponse>) => {\r\n\r\n          const listWithDetails = companiesDetailsSelector(state);\r\n          \r\n          let companyDetails = listWithDetails.find(x => x.id == payload.companyId);\r\n          if (companyDetails != undefined)\r\n          {\r\n            companyDetails.employees = payload.employees;\r\n\r\n            // delete company details\r\n            const companyIndex = listWithDetails.findIndex(x => x.id == payload.companyId);\r\n\r\n            if (companyIndex !== undefined)\r\n              listWithDetails.splice(companyIndex, 1);\r\n            \r\n            listWithDetails.push(companyDetails)\r\n          }  \r\n\r\n          state.listWithDetails = listWithDetails\r\n          state.loadingEmployee = false\r\n        },\r\n\r\n        setCompanyDimensions : (state, {payload} : PayloadAction<CompanyDimensionResponse>) => {\r\n\r\n          const listWithDetails = companiesDetailsSelector(state);\r\n          \r\n          let companyDetails = listWithDetails.find(x => x.id == payload.companyId);\r\n          if (companyDetails != undefined)\r\n          {\r\n            companyDetails.dimensions = payload.dimensions;\r\n\r\n            // delete company details\r\n            const companyIndex = listWithDetails.findIndex(x => x.id == payload.companyId);\r\n\r\n            if (companyIndex !== undefined)\r\n              listWithDetails.splice(companyIndex, 1);\r\n            \r\n            listWithDetails.push(companyDetails)\r\n          }  \r\n\r\n          state.listWithDetails = listWithDetails\r\n          state.loadingDimension = false\r\n        },\r\n\r\n        setCompanyEmployeesOverViews : (state, {payload} : PayloadAction<CompanyEmployeesOverViewResponse>) => {\r\n\r\n          const listWithDetails = companiesDetailsSelector(state);\r\n          \r\n          let companyDetails = listWithDetails.find(x => x.id == payload.companyId);\r\n          if (companyDetails != undefined)\r\n          {\r\n            companyDetails.employeesOverViews = payload.employeesOverViews;\r\n\r\n            // delete company details\r\n            const companyIndex = listWithDetails.findIndex(x => x.id == payload.companyId);\r\n\r\n            if (companyIndex !== undefined)\r\n              listWithDetails.splice(companyIndex, 1);\r\n            \r\n            listWithDetails.push(companyDetails)\r\n          }  \r\n\r\n          state.listWithDetails = listWithDetails\r\n          state.loadingDimension = false\r\n        },\r\n    }\r\n});\r\n\r\nexport const { setLoading, setLoadingAddress, setLoadingActivity, setLoadingEmployeeContact, setLoadingEmployeesOverView, setLoadingDimension,setLoadingEmployee, setErrors, setCompanies, setCompananiesDetails, delCompany, setCompanyAddresses, setCompanyDimensions, setCompanyActivities, setCompanyEmployees,setCompanyEmployeesOverViews } = CompaniesSlice.actions;\r\n\r\nexport default CompaniesSlice.reducer;\r\n\r\nexport const companySelector = (state: { companies: CompanyState }) => state.companies;\r\nexport const companiesDetailsSelector = (state: CompanyState ) => state.listWithDetails;\r\n\r\n\r\n// COMPANY //\r\nexport const getCompanies = (): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n      \r\n        const response = await axios.get(config.baseUrl.api  + ENDPOINTS.companies.base)\r\n\r\n        dispatch(setCompanies(response.data));\r\n\r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n      }\r\n    };\r\n  };\r\n\r\nexport const getCompanyDetails = (companyId : string): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n      \r\n        const response = await axios.get(config.baseUrl.api  + ENDPOINTS.companies.details.replace(\"{companyId}\", companyId))\r\n\r\n        dispatch(setCompananiesDetails(response.data));\r\n\r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n      }\r\n    };\r\n};\r\n\r\nexport const createCompany = (company: Company): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n       \r\n        console.log(company)\r\n        const response = await axios.post(config.baseUrl.api  + ENDPOINTS.companies.base, company)\r\n\r\n        //dispatch(cret(response.data));\r\n        \r\n        toast.success(\"YOO, YOU ROCKZ\");\r\n        \r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n      }\r\n    };\r\n};\r\n\r\nexport const changeCompany = (id : string, company: Company): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.put(config.baseUrl.api  + ENDPOINTS.companies.base + `/${id}`, company )\r\n\r\n      //(updCompany(true));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeCompany = (id : string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.companies.base + `/${id}`)\r\n\r\n      dispatch(delCompany(id));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// COMPANY ADDRESSES //\r\nexport const getCompanyAddresses = (companyId : string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingAddress(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.get(config.baseUrl.api  + ENDPOINTS.companies.addresses.base.replace(\"{companyId}\", companyId))\r\n\r\n      const companyAddressResponse : CompanyAddressResponse = {\r\n        companyId : companyId,\r\n        addresses : response.data\r\n      }\r\n\r\n      dispatch(setCompanyAddresses(companyAddressResponse));\r\n\r\n      dispatch(setLoadingAddress(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingAddress(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const addCompanyAddress = (companyId : string, address: CompanyAddress): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingAddress(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.post(config.baseUrl.api  + ENDPOINTS.companies.addresses.base.replace(\"{companyId}\", companyId), address);\r\n      \r\n      dispatch(getCompanyAddresses(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      \r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingAddress(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const delCompanyAddress = (companyId : string, addressId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingAddress(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.companies.addresses.address.replace(\"{companyId}\", companyId).replace(\"{addressId}\", addressId));\r\n      \r\n      dispatch(getCompanyAddresses(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingAddress(false));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// COMPANY ACTIVITIES //\r\nexport const getCompanyActivities = (companyId : string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingActivity(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.get(config.baseUrl.api  + ENDPOINTS.companies.activities.base.replace(\"{companyId}\", companyId))\r\n\r\n      const companyActivityResponse : CompanyActivityResponse = {\r\n        companyId : companyId,\r\n        activities : response.data\r\n      }\r\n\r\n      dispatch(setCompanyActivities(companyActivityResponse));\r\n\r\n      dispatch(setLoadingActivity(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingActivity(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const addCompanyActivity = (companyId : string, activity: CompanyActivity): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingActivity(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.post(config.baseUrl.api  + ENDPOINTS.companies.activities.base.replace(\"{companyId}\", companyId), activity);\r\n      \r\n      dispatch(getCompanyActivities(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      \r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingActivity(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const delCompanyActivity = (companyId : string, activityId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingActivity(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.companies.activities.activity.replace(\"{companyId}\", companyId).replace(\"{activityId}\", activityId));\r\n      \r\n      dispatch(getCompanyActivities(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingActivity(false));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// COMPANY DIMENSION //\r\nexport const getCompanyDimension = (companyId : string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingDimension(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.get(config.baseUrl.api  + ENDPOINTS.companies.dimensions.base.replace(\"{companyId}\", companyId))\r\n\r\n      const companyDimensionResponse : CompanyDimensionResponse = {\r\n        companyId : companyId,\r\n        dimensions : response.data\r\n      }\r\n\r\n      dispatch(setCompanyDimensions(companyDimensionResponse));\r\n\r\n      dispatch(setLoadingDimension(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingDimension(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const addCompanyDimension = (companyId : string, dimension: CompanyDimension): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingDimension(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.post(config.baseUrl.api  + ENDPOINTS.companies.dimensions.base.replace(\"{companyId}\", companyId), dimension);\r\n      \r\n      dispatch(getCompanyDimension(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      \r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingDimension(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const delCompanyDimension = (companyId : string, dimensionId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingDimension(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.companies.dimensions.dimension.replace(\"{companyId}\", companyId).replace(\"{dimensionId}\", dimensionId));\r\n      \r\n      dispatch(getCompanyDimension(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingDimension(false));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// COMPANY EMPLOYEES OVERVIEW //\r\nexport const getCompanyEmployeesOverView = (companyId : string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployeesOverView(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.get(config.baseUrl.api  + ENDPOINTS.companies.employeesOverViews.base.replace(\"{companyId}\", companyId))\r\n\r\n      const companyEmployeesOverViewResponse : CompanyEmployeesOverViewResponse = {\r\n        companyId : companyId,\r\n        employeesOverViews : response.data\r\n      }\r\n\r\n      dispatch(setCompanyEmployeesOverViews(companyEmployeesOverViewResponse));\r\n\r\n      dispatch(setLoadingEmployeesOverView(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployeesOverView(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const addCompanyEmployeesOverView = (companyId : string, employeesOverView: CompanyEmployeesOverView): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployeesOverView(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.post(config.baseUrl.api  + ENDPOINTS.companies.employeesOverViews.base.replace(\"{companyId}\", companyId), employeesOverView);\r\n      \r\n      dispatch(getCompanyEmployeesOverView(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      \r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployeesOverView(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const delCompanyEmployeesOverView = (companyId : string, employeesOverViewId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployeesOverView(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.companies.employeesOverViews.employeesOverView.replace(\"{companyId}\", companyId).replace(\"{employeesOverViewId}\", employeesOverViewId));\r\n      \r\n      dispatch(getCompanyEmployeesOverView(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployeesOverView(false));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// COMPANY EMPLOYEES //\r\nexport const getCompanyEmployees = (companyId : string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployee(true));\r\n\r\n    try {\r\n    \r\n      const response = await axios.get(config.baseUrl.api  + ENDPOINTS.companies.employees.base.replace(\"{companyId}\", companyId))\r\n\r\n      const companyEmployeeResponse : CompanyEmployeeResponse = {\r\n        companyId : companyId,\r\n        employees : response.data\r\n      }\r\n\r\n      console.log(companyEmployeeResponse);\r\n      dispatch(setCompanyEmployees(companyEmployeeResponse));\r\n\r\n      dispatch(setLoadingEmployee(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployee(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const addCompanyEmployee = (companyId : string, employee: CompanyEmployee): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployee(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.post(config.baseUrl.api  + ENDPOINTS.companies.employees.base.replace(\"{companyId}\", companyId), employee);\r\n      \r\n      dispatch(getCompanyEmployees(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      \r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployee(false));\r\n    }r\n  };\r\n};\r\n\r\nexport const delCompanyEmployee = (companyId : string, employeeId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployee(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.companies.employees.employee.replace(\"{companyId}\", companyId).replace(\"{employeeId}\", employeeId));\r\n      \r\n      dispatch(getCompanyEmployees(companyId))\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployee(false));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// EMPLOYEE CONTACTS //\r\nexport const addEmployeeContact = (companyId : string, employeeId: string, contact : EmployeeContact): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployeeContact(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.post(config.baseUrl.api  + ENDPOINTS.companies.employees.contacts.replace(\"{companyId}\", companyId).replace(\"{employeeId}\", employeeId), contact);\r\n      \r\n      dispatch(getCompanyEmployees(companyId))\r\n\r\n      dispatch(setLoadingEmployeeContact(false));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      \r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployeeContact(false));\r\n    }r\n  };\r\n};\r\n\r\nexport const delEmployeeContact = (companyId : string, employeeId: string, contactId: string): AppThunk => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoadingEmployeeContact(true));\r\n\r\n    try {\r\n     \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.companies.employees.contact.replace(\"{companyId}\", companyId).replace(\"{employeeId}\", employeeId).replace(\"{contactId}\", contactId));\r\n      \r\n      dispatch(getCompanyEmployees(companyId))\r\n\r\n      dispatch(setLoadingEmployeeContact(false));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoadingEmployeeContact(false));\r\n    }\r\n  };\r\n};\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\services\\constants\\global.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\app\\store.ts",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\app\\rootReducer.ts",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\toasters\\toastersSlice.ts",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\alert\\dialog.tsx",["260"],"import { Button,  Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ntype ConfirmDialogProps = {\r\n    title : string,\r\n    children : any,\r\n    open : boolean,\r\n    setDialogOpen : any,\r\n    onConfirm  : any\r\n}   \r\n\r\nconst ConfirmDialog = (props : ConfirmDialogProps) => {\r\n  const { title, children, open, setDialogOpen: setDialogOpen, onConfirm} = props;\r\n  \r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => setDialogOpen({open:false})}\r\n      aria-labelledby=\"confirm-dialog\">\r\n      <DialogTitle id=\"confirm-dialog\">{title}</DialogTitle>\r\n      <DialogContent>{children}</DialogContent>\r\n      <DialogActions>\r\n        <Button variant=\"contained\" onClick={() => setDialogOpen({open:false})} color=\"secondary\">No</Button>\r\n\r\n        <Button variant=\"contained\" onClick={() => {setDialogOpen({open:false}); onConfirm({onConfirm}); }} color=\"default\"> Yes</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ConfirmDialog;","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\ListView\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\index.tsx",["261","262"],"import React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  makeStyles,\r\n  Grid,\r\n  Paper,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  AppBar\r\n} from '@material-ui/core';\r\nimport Page from '../../../components/Page';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { companySelector, getCompanyDetails, getCompanyEmployeesOverView } from '../../../features/companies/companySlice';\r\nimport BaseCompanyForm from './components/baseCompanyform';\r\nimport AddressCompanyView from './components/components/addressCompany';\r\nimport EmployeeCompanyView from './components/components/employeeCompany';\r\nimport ActivityCompanyView from './components/components/activityCompany';\r\nimport { Company } from '../../../app/ITypes';\r\nimport DimensionCompanyView from './components/components/dimensionCompany/index';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport EmployeeOverViewCompanyView from './components/components/employeeOverViewCompany';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center'\r\n  },\r\n}));\r\n\r\n\r\nfunction TabPanel(props : any) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div {...other}>\r\n      {value === index && <Box>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CompanyEdidView = () => {\r\n\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch()\r\n  let { id } = useParams();\r\n  const { listWithDetails, loading} = useSelector(companySelector);\r\n\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect( () => {\r\n\r\n    async function GetCompanyDetails(id : string) {\r\n      dispatch(getCompanyDetails(id));\r\n    }\r\n\r\n    GetCompanyDetails(id)\r\n\r\n  }, [dispatch]);\r\n\r\n  let company : Company = {\r\n    id: '',\r\n    pIva : '',\r\n    province : '',\r\n    address : '',\r\n    cap : '',\r\n    city : '',\r\n    contractType : '',\r\n    subScriptionType : '',\r\n    fiscalCode : '',\r\n    name : '',\r\n    subScriptionDate : new Date(),\r\n  }\r\n\r\n  if (!loading) {\r\n    var details = listWithDetails.find(x => x.id === id)\r\n    if (details !== undefined)\r\n      company = details;\r\n  }\r\n  \r\n  return (\r\n    <Page className={classes.root} title=\"Register\">\r\n      \r\n      <ToastContainer autoClose={2000} />\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\">\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} sm={6}>\r\n                <Paper className={classes.paper}>\r\n                {loading ? (\r\n                    <CircularProgress />\r\n                    ) : (\r\n                      <BaseCompanyForm company={company}></BaseCompanyForm>\r\n                    )} \r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <AppBar position=\"static\">\r\n                <Tabs value={value} onChange={handleChange}>\r\n                  <Tab label=\"Addresses\" />\r\n                  <Tab label=\"Activities\" />\r\n                  <Tab label=\"Dimensions\" />\r\n                  <Tab label=\"Employees\" />\r\n                </Tabs>\r\n              </AppBar>\r\n              <TabPanel value={value} index={0}>\r\n                <Paper className={classes.paper}>\r\n                {loading ? (\r\n                    <CircularProgress />\r\n                    ) : (\r\n                      <AddressCompanyView addresses={company?.addresses}></AddressCompanyView>\r\n                    )} \r\n                </Paper>\r\n              </TabPanel>\r\n              <TabPanel value={value} index={1}>\r\n                <Paper className={classes.paper}>\r\n                {loading ? (\r\n                    <CircularProgress />\r\n                    ) : (\r\n                      <ActivityCompanyView activities={company?.activities}></ActivityCompanyView>\r\n                    )} \r\n                </Paper>\r\n              </TabPanel>\r\n              <TabPanel value={value} index={2}>\r\n                <Paper className={classes.paper}>\r\n                {loading ? (\r\n                  <CircularProgress />\r\n                    ) : (\r\n                      <DimensionCompanyView dimensions={company?.dimensions} subScriptionType={company?.subScriptionType}></DimensionCompanyView>\r\n                    )} \r\n                </Paper>\r\n              </TabPanel>\r\n              <TabPanel value={value} index={3}>\r\n                <Paper className={classes.paper}>\r\n                {loading ? (\r\n                  <CircularProgress />\r\n                    ) : (\r\n                      <EmployeeOverViewCompanyView employeesOverViews={company?.employeesOverViews}></EmployeeOverViewCompanyView>\r\n                    )} \r\n                </Paper>\r\n              </TabPanel>\r\n\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n                <Paper className={classes.paper}>\r\n                {loading ? (\r\n                    <CircularProgress />\r\n                    ) : (\r\n                      <EmployeeCompanyView employees={company?.employees}></EmployeeCompanyView>\r\n                    )} \r\n                </Paper>\r\n            </Grid>\r\n          </Grid>\r\n      </Box>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default CompanyEdidView;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\CreateView\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\ListView\\Toolbar.tsx",["263"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  InputAdornment,\r\n  SvgIcon,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { Search as SearchIcon } from 'react-feather';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addFilter } from '../../../features/filters/filtersSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  importButton: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  exportButton: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\ninterface Toolbar {\r\n    className? : string\r\n}\r\n\r\nconst Toolbar = ({ className, ...rest } : Toolbar) => {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    dispatch(addFilter(event.currentTarget.value))\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"flex-end\">\r\n\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => navigate('../company', { replace: true })}>\r\n          Add company\r\n        </Button>\r\n      </Box>\r\n      <Box mt={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Box maxWidth={500}>\r\n              <TextField\r\n                fullWidth\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SvgIcon fontSize=\"small\" color=\"action\" >\r\n                        <SearchIcon />\r\n                      </SvgIcon>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n                onChange={(\r\n                  ev: React.ChangeEvent<HTMLInputElement> ): void => onChange(ev)}\r\n                placeholder=\"Search company\"\r\n                variant=\"outlined\"\r\n              />\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Toolbar;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\ListView\\DataGrid.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\baseCompanyform.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\addressCompany\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\index.tsx",["264"],"import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { CompanyEmployee } from '../../../../../../app/ITypes';\r\nimport DataGrid from './DataGrid';\r\nimport Toolbar from './Toolbar';\r\nimport { companySelector } from '../../../../../../features/companies/companySlice';\r\nimport { useParams } from 'react-router-dom';\r\n\r\ntype EmployeeCompanyFormProps = {\r\n    employees? : [CompanyEmployee]\r\n}\r\n\r\nconst EmployeeCompanyView = (props : EmployeeCompanyFormProps) => {\r\n\r\n    const {loading, loadingEmployee,loadingEmployeeContact} = useSelector(companySelector);\r\n\r\n    return (\r\n      \r\n        /* HEADER */\r\n        <Box width=\"100%\">\r\n\r\n            <Box mb={3}>\r\n                <Typography color=\"textPrimary\" variant=\"h3\">\r\n                    Employees Contact\r\n                </Typography>\r\n            </Box>\r\n\r\n            {/* ADD NEW CONTACT */}\r\n            <Box mb={3}>\r\n                <Toolbar></Toolbar>\r\n            </Box>\r\n\r\n            {/* EDIT & REMOVE */}\r\n            <Box mb={3}>\r\n                <DataGrid employees={props.employees} loading={loading} loadingEmployee={loadingEmployee} loadingEmployeeContact={loadingEmployeeContact}></DataGrid>   \r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default EmployeeCompanyView","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\Toolbar.tsx",["265"],"import React, { useEffect, useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { CircularProgress, Fab, FormControl, Grid,  InputLabel, Select, TextField} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Formik } from 'formik';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addCompanyEmployee } from '../../../../../../features/companies/companySlice';\r\nimport { useParams } from 'react-router-dom';\r\nimport { CompanyEmployee } from '../../../../../../app/ITypes';\r\nimport clsx from \"clsx\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { contactTypesSelector, getContactTypes } from '../../../../../../features/contactTypes/contactTypesSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      minWidth: 120\r\n    },\r\n    wrapper: {\r\n     \r\n        position: \"relative\"\r\n    },\r\n    buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        \"&:hover\": {\r\n            backgroundColor: green[700]\r\n        }\r\n    },\r\n    fabProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: -6,\r\n        left: -34.5,\r\n        zIndex: 1,\r\n        marginLeft:\"50%\"\r\n    },\r\n    buttonProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12\r\n    }\r\n  }));\r\n\r\nconst Toolbar = () => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    let { id } = useParams();\r\n\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success\r\n    });\r\n\r\n    useEffect(() => {\r\n  \r\n       dispatch(getContactTypes());\r\n   \r\n    }, [dispatch]);\r\n        \r\n    const contactsTypes = useSelector(contactTypesSelector);\r\n\r\n    const onAddEmployee = (values: CompanyEmployee ) => {\r\n\r\n        setSuccess(false);\r\n        setSaveLoading(true);\r\n\r\n        const companyEmployee : CompanyEmployee = {\r\n          id :'',\r\n          name : values.name,\r\n          surname : values.surname,\r\n          contactType : values.contactType,\r\n          isRemoved : values.isRemoved\r\n        }\r\n\r\n        setTimeout(() => {\r\n\r\n            dispatch(addCompanyEmployee(id, companyEmployee));\r\n\r\n            setSuccess(true);\r\n            setSaveLoading(false);\r\n\r\n            setTimeout(() => {\r\n                setSuccess(false)\r\n            }, 1000);\r\n\r\n        }, 1000);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            \r\n              <Grid item xs={12}>\r\n                <Formik\r\n                    initialValues={{\r\n                        id : '',\r\n                        name : '',\r\n                        surname : '',\r\n                        contactType : '',\r\n                        isRemoved : false\r\n                    }}\r\n         \r\n                     onSubmit={(values, actions) => {\r\n                        \r\n                        setTimeout(() => {\r\n\r\n                            actions.setSubmitting(false);\r\n\r\n                            onAddEmployee(values)\r\n\r\n                            actions.resetForm({values : {\r\n                                id : '',\r\n                                name : '',\r\n                                surname : '',\r\n                                contactType : '',\r\n                                isRemoved : false\r\n                            }})\r\n        \r\n                        }, );    \r\n                    }}\r\n                    >\r\n                    {({\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        touched,\r\n                        values\r\n                    }) => (\r\n                    <form onSubmit={handleSubmit} name=\"companyContact\">\r\n                        <Grid container spacing={3}>\r\n                            <Grid item md={3} xs={12}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl} style={{minWidth: 220}}>\r\n                                 <InputLabel htmlFor=\"contactType\">ContactTypes</InputLabel>\r\n                                 <Select\r\n                                        fullWidth\r\n                                        required\r\n                                        native\r\n                                        value={touched.contactType}\r\n                                        onChange={handleChange}\r\n                                        label=\"Contact Type\"\r\n                                        inputProps={{\r\n                                            name: \"contactType\",\r\n                                            id: \"contactType\"\r\n                                        }}>\r\n                                        <option value=''></option>\r\n                                    {(contactsTypes.types && contactsTypes.types.length) > 0 ? (\r\n                                        contactsTypes.types.map((type, index) => (\r\n                                            <option key={index} value={type.name}>{type.name}</option>\r\n                                        ))) : (                                       \r\n                                            <option value='No Data'>No Data</option>\r\n                                    )};\r\n                                \r\n                                </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={3} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    className={classes.formControl}\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    inputProps={{\r\n                                        maxLength: 80\r\n                                    }}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    value={values.name}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={4} xs={12} className={classes.formControl} style={{minWidth: 220}}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    className={classes.formControl}\r\n                                    label=\"Surname\"\r\n                                    name=\"surname\"\r\n                                    inputProps={{\r\n                                        maxLength: 80\r\n                                    }}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    value={values.surname}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={2} xs={12}>\r\n                                <div className={classes.wrapper}>\r\n                                    <Fab\r\n                                        aria-label=\"save\"\r\n                                        color=\"primary\"\r\n                                        className={buttonClassname}\r\n                                        type=\"submit\">\r\n                                        {success ? <CheckIcon /> : <SaveIcon />}\r\n                                    </Fab>\r\n                                    {(\r\n                                       saveLoading && <CircularProgress size={68} className={classes.fabProgress} />\r\n                                    )}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </form>\r\n                    )}\r\n                </Formik>\r\n              </Grid>\r\n        </Grid>\r\n      )\r\n}\r\n\r\nexport default Toolbar","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\DataGrid.tsx",["266","267","268","269","270","271"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Button,\r\n  Dialog,\r\n  Collapse,\r\n  Typography,\r\n  Grid,\r\n} from '@material-ui/core';\r\nimport { CompanyEmployee } from '../../../../../../app/ITypes';\r\nimport ConfirmDialog from '../../../../../../features/alert/dialog';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { delCompanyEmployee } from '../../../../../../features/companies/companySlice';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport EmployeeComtactView from './employeeContacts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actions : {\r\n    maxWidth:'200px',\r\n    width:'20%',\r\n  },\r\n  wrapper: {\r\n     \r\n    position: \"relative\"\r\n  },\r\n  buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      \"&:hover\": {\r\n          backgroundColor: green[700]\r\n      }\r\n  },\r\n  fabProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: -6,\r\n      left: 1,\r\n      zIndex: 1\r\n  },\r\n  buttonProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      marginTop: -12,\r\n      marginLeft: -12\r\n  } \r\n}));\r\n\r\ninterface DataGridProps {\r\n  className? : string,\r\n  employees? : CompanyEmployee[],\r\n  loading : boolean,\r\n  loadingEmployee : boolean\r\n  loadingEmployeeContact:boolean\r\n}\r\n\r\ntype DialogInfoType = {\r\n  id : string,\r\n  open: boolean,\r\n  type: string,\r\n  value:string\r\n}\r\n\r\ntype CollapseType = {\r\n  id : string,\r\n  open: boolean\r\n}\r\n\r\nconst EmployeeDataGrid = ({ className, employees, loading, loadingEmployee, loadingEmployeeContact, ...rest } : DataGridProps) => {\r\n  const classes = useStyles();\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [page, setPage] = useState(0);\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  // store selected item values to display id to delete\r\n  const [dialogInfo, setDialogInfoOpen] = useState<DialogInfoType>({open:false, id: '', type : '', value: ''});\r\n  const [openTableDetailContact, setTableAddContactOpen] = useState<CollapseType>({open:false, id:''});\r\n\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n\r\n  const OnDelEmployee = () => {\r\n\r\n    const employeeId = dialogInfo.id;\r\n    setTimeout(() => {\r\n\r\n        dispatch(delCompanyEmployee(id, employeeId));\r\n\r\n    }, 400);\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n\r\n      <ConfirmDialog\r\n          title=\"Delete Contact?\"\r\n          open={dialogInfo.open}\r\n          setDialogOpen={setDialogInfoOpen}\r\n          onConfirm= {OnDelEmployee}\r\n        >\r\n          Are you sure you want to delete this contact? \r\n          <p>{dialogInfo.type} : {dialogInfo.value}</p> \r\n        \r\n        </ConfirmDialog>\r\n        <Box >\r\n          <Table>\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell width=\"30%\">\r\n                  Contact Type\r\n                </TableCell>\r\n                <TableCell width=\"30%\">\r\n                  Name\r\n                </TableCell>\r\n                <TableCell width=\"30%\">\r\n                  Surname\r\n                </TableCell>\r\n                <TableCell width=\"10%\" align=\"center\">\r\n                  Actions\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n\r\n              {loadingEmployee ?\r\n                (\r\n                <TableRow >\r\n                   <TableCell colSpan={6}>\r\n                      <CircularProgress color=\"secondary\" />\r\n                    </TableCell>\r\n                </TableRow> ) :\r\n                ( employees && employees.length > 0 && employees.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((employee, index) => (\r\n                  <React.Fragment key={index}>\r\n                    <TableRow hover key={\"Master_\" + index}>\r\n                      <TableCell>\r\n                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setTableAddContactOpen({open:(openTableDetailContact.id === employee.id) ? !openTableDetailContact.open : true, id:employee.id})}>\r\n                          {openTableDetailContact.id == employee.id && openTableDetailContact.open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                      </TableCell>\r\n                      <TableCell width=\"30%\">\r\n                        {employee.contactType}\r\n                      </TableCell>\r\n                      <TableCell width=\"30%\">\r\n                        {employee.name}\r\n                      </TableCell>\r\n                      <TableCell width=\"30%\">\r\n                        {employee.surname}\r\n                      </TableCell>\r\n                      <TableCell className={classes.actions} aria-label=\"add contact\" >\r\n                        <IconButton key={index} aria-label=\"delete\" color=\"secondary\" onClick={() => setDialogInfoOpen({open:true, id:employee.id, type:employee.name, value: employee.surname })}>\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    <TableRow hover key={\"Detail_\" + index}>\r\n                      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                      <Collapse in={openTableDetailContact.id == employee.id && openTableDetailContact.open} timeout=\"auto\" unmountOnExit>\r\n                        <Box margin={1}>\r\n                          <Grid container spacing={3}>\r\n                            <Grid item xs={12} sm={6}>\r\n                              <EmployeeComtactView employeeId={employee.id} contacts={employee.contacts} loadingEmployee={loadingEmployee} loadingEmployeeContact={loadingEmployeeContact}></EmployeeComtactView>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Box>\r\n                      </Collapse>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  </React.Fragment>))\r\n              )}\r\n\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={employees ? employees.length : 0}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EmployeeDataGrid;\r\n\r\n\r\n\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\addressCompany\\Toolbar.tsx",["272","273"],"import React, { useEffect, useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { CircularProgress, Fab, FormControl, Grid,  InputLabel, Select, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Formik } from 'formik';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addCompanyAddress } from '../../../../../../features/companies/companySlice';\r\nimport { useParams } from 'react-router-dom';\r\nimport { CompanyAddress } from '../../../../../../app/ITypes';\r\nimport { addressTypesSelector, getAddressTypes } from '../../../../../../features/addressTypes/adrressTypesSlice';\r\nimport clsx from \"clsx\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      minWidth: 120\r\n    },\r\n    wrapper: {\r\n     \r\n        position: \"relative\"\r\n    },\r\n    buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        \"&:hover\": {\r\n            backgroundColor: green[700]\r\n        }\r\n    },\r\n    fabProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: -6,\r\n        left: -34.5,\r\n        zIndex: 1,\r\n        marginLeft:\"50%\"\r\n    },\r\n    buttonProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12\r\n    }\r\n  }));\r\n\r\n\r\nconst Toolbar = () => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    let { id } = useParams();\r\n\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const addressTypes = useSelector(addressTypesSelector);\r\n\r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success\r\n    });\r\n\r\n    const onAddAddress = (values: CompanyAddress ) => {\r\n\r\n        setSuccess(false);\r\n        setSaveLoading(true);\r\n\r\n        const companyAddress : CompanyAddress = {\r\n          id :'',\r\n          addressType : values.addressType,\r\n          value : values.value,\r\n          isRemoved : values.isRemoved\r\n        }\r\n\r\n        setTimeout(() => {\r\n\r\n            dispatch(addCompanyAddress(id, companyAddress));\r\n\r\n            setSuccess(true);\r\n            setSaveLoading(false);\r\n\r\n            setTimeout(() => {\r\n                setSuccess(false)\r\n            }, 1000);\r\n\r\n        }, 400);\r\n    }\r\n    \r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            \r\n              <Grid item xs={12}>\r\n                <Formik \r\n                    initialValues={{\r\n                        id : '',\r\n                        addressType : '',\r\n                        value : '',\r\n                        isRemoved : false\r\n                    }}\r\n                    validationSchema={\r\n                        Yup.object().shape({\r\n                            addressType: Yup.string().max(80).required('is required'),\r\n                            value : Yup.string().max(80).required('is required')   \r\n                        })}\r\n                    onSubmit={(values, actions) => {\r\n                        setTimeout(() => {\r\n\r\n                            actions.setSubmitting(false);\r\n\r\n                            onAddAddress(values)\r\n\r\n                            actions.resetForm({values : {\r\n                                id : '',\r\n                                addressType : '',\r\n                                value : '',\r\n                                isRemoved : false\r\n                            }})\r\n        \r\n                        }, 1000);\r\n                        \r\n                    }}>\r\n                    {({\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        touched,\r\n                        values\r\n                    }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item md={3} xs={12}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"addressType\">Types</InputLabel>\r\n                                    <Select\r\n                                        required\r\n                                        native\r\n                                        value={touched.addressType}\r\n                                        onChange={handleChange}\r\n                                        label=\"Tipo\"\r\n                                        inputProps={{\r\n                                            name: \"addressType\",\r\n                                            id: \"addressType\"\r\n                                        }}>\r\n                                        <option value=''></option> \r\n                                      {(addressTypes && addressTypes.types && addressTypes.types.length) > 0 ? (\r\n                                        addressTypes.types.map((type , index) => (\r\n                                            <option key={index} value={type.name}>{type.name}</option>\r\n                                        ))) : (                                       \r\n                                            <option value='No Data'>No Data</option>\r\n                                    )};\r\n                                \r\n                                </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={7} xs={12} className={classes.formControl}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    className={classes.formControl}\r\n                                    label=\"Indirizzo\"\r\n                                    name=\"value\"\r\n                                    inputProps={{\r\n                                        maxLength: 80\r\n                                    }}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    value={values.value}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={2} xs={12}>\r\n                                <div className={classes.wrapper}>\r\n                                    <Fab\r\n                                        aria-label=\"save\"\r\n                                        color=\"primary\"\r\n                                        className={buttonClassname}\r\n                                        type=\"submit\">\r\n                                        {success ? <CheckIcon /> : <SaveIcon />}\r\n                                    </Fab>\r\n                                    {(\r\n                                       saveLoading && <CircularProgress size={68} className={classes.fabProgress} />\r\n                                    )}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </form>\r\n                    )}\r\n                </Formik>\r\n              </Grid>\r\n        </Grid>\r\n      )\r\n}\r\n\r\nexport default Toolbar","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\addressCompany\\DataGrid.tsx",["274","275"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport { CompanyAddress } from '../../../../../../app/ITypes';\r\nimport ConfirmDialog from '../../../../../../features/alert/dialog';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { delCompanyAddress } from '../../../../../../features/companies/companySlice';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actions : {\r\n    maxWidth:'200px',\r\n    width:'20%',\r\n  },\r\n  wrapper: {\r\n     \r\n    position: \"relative\"\r\n  },\r\n  buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      \"&:hover\": {\r\n          backgroundColor: green[700]\r\n      }\r\n  },\r\n  fabProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: -6,\r\n      left: 1,\r\n      zIndex: 1\r\n  },\r\n  buttonProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      marginTop: -12,\r\n      marginLeft: -12\r\n  } \r\n}));\r\n\r\ntype DataGridProps = {\r\n  className? : string,\r\n  addresses? : CompanyAddress[],\r\n  loading : boolean,\r\n  loadingAddress : boolean\r\n}\r\n\r\ntype DialogInfoType = {\r\n  id : string,\r\n  open: boolean,\r\n  type: string,\r\n  value:string\r\n}\r\n\r\nconst AddressDataGrid = ({ className, addresses, loading, loadingAddress, ...rest } : DataGridProps) => {\r\n  const classes = useStyles();\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [page, setPage] = useState(0);\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  // store selected item values to display id to delete\r\n  const [dialogInfo, setConfirmOpen] = useState<DialogInfoType>({open:false, id: '', type : '', value: ''});\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n \r\n  const OnDelAddress = () => {\r\n\r\n    const addressId = dialogInfo.id;\r\n    setTimeout(() => {\r\n\r\n        dispatch(delCompanyAddress(id, addressId));\r\n\r\n    }, 400);\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n      <ConfirmDialog\r\n          title=\"Delete Address?\"\r\n          open={dialogInfo.open}\r\n          setDialogOpen={setConfirmOpen}\r\n          onConfirm= {OnDelAddress}\r\n        >\r\n          Are you sure you want to delete this address? \r\n          <p>{dialogInfo.type} : {dialogInfo.value}</p> \r\n        \r\n        </ConfirmDialog>\r\n        <Box >\r\n          <Table>\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell width=\"20%\">\r\n                  Type\r\n                </TableCell>\r\n                <TableCell width=\"60%\">\r\n                  Value\r\n                </TableCell>\r\n                <TableCell width=\"20%\" align=\"center\">\r\n                  Actions\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n\r\n              {loadingAddress ?\r\n                (\r\n                <TableRow >\r\n                   <TableCell colSpan={6}>\r\n                      <CircularProgress color=\"secondary\" />\r\n                    </TableCell>\r\n                </TableRow> ) :\r\n                (\r\n                 addresses && addresses.length > 0 && addresses.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((address, index) => (\r\n                  <TableRow hover key={index}>\r\n                    <TableCell width=\"20%\">\r\n                       {address.addressType}\r\n                    </TableCell>\r\n                    <TableCell width=\"60%\">\r\n                      {address.value}\r\n                    </TableCell>\r\n                    <TableCell className={classes.actions}>\r\n                      <IconButton key={index} aria-label=\"delete\" color=\"secondary\" onClick={() => setConfirmOpen({open:true, id:address.id, type:address.addressType, value: address.value})}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                     \r\n                    </TableCell>\r\n                  </TableRow>))\r\n              )}\r\n\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={addresses ? addresses.length : 0}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddressDataGrid;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\contactTypes\\contactTypesSlice.ts",["276","277"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport {  ContactType, ReferenceBaseTypeState} from '../../app/ITypes';\r\nimport { AppThunk } from '../../app/store';\r\nimport { config  } from '../../services/configs/config';\r\nimport { ENDPOINTS } from '../../services/constants/appEndpoints';\r\n\r\nexport interface ContactTypeState extends ReferenceBaseTypeState {\r\n    types: ContactType[];\r\n }\r\n\r\nconst initialState: ContactTypeState = {\r\n  types: [],\r\n    loading: false,\r\n    errors:'',  \r\n}\r\n\r\nconst ContactTypesSlice = createSlice({\r\n    name : \"contactTypes\",\r\n    initialState,\r\n    reducers: {\r\n        setLoading : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload\r\n        },\r\n\r\n        setErrors :(state, {payload} : PayloadAction<string>) => {\r\n          state.errors = payload;\r\n        },\r\n\r\n        setContactTypes :(state, {payload} : PayloadAction<ContactType[]>) => {\r\n          state.types = payload;\r\n        },   \r\n\r\n        updContactType :(state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload;\r\n        }, \r\n\r\n        delContactType :(state, {payload} : PayloadAction<string>) => {\r\n          state.types = state.types.filter(x => x.id !== payload)\r\n        }, \r\n    }\r\n});\r\n\r\nexport const { setLoading, setErrors, setContactTypes, updContactType, delContactType } = ContactTypesSlice.actions;\r\n\r\nexport default ContactTypesSlice.reducer;\r\n\r\nexport const contactTypesSelector = (state: { contactTypes: ContactTypeState }) => state.contactTypes;\r\n\r\nexport const getContactTypes = (): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n      \r\n        const response = await axios.get(config.baseUrl.api  + ENDPOINTS.contactTypes.base)\r\n\r\n        dispatch(setContactTypes(response.data));\r\n\r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const changeContactType = (id : string, contact: ContactType): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.put(config.baseUrl.api  + ENDPOINTS.contactTypes.base + `/${id}`, contact )\r\n\r\n      dispatch(updContactType(true));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeContactType = (id : string): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.contactTypes.base + `/${id}`)\r\n\r\n      dispatch(delContactType(id));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\addressTypes\\adrressTypesSlice.ts",["278","279"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { AddressType, ReferenceBaseTypeState} from '../../app/ITypes';\r\nimport { AppThunk } from '../../app/store';\r\nimport { config } from '../../services/configs/config';\r\nimport { ENDPOINTS } from '../../services/constants/appEndpoints';\r\n\r\nexport interface AddressTypeState extends ReferenceBaseTypeState {\r\n    types: AddressType[];\r\n }\r\n\r\nconst initialState: AddressTypeState = {\r\n    types: [],\r\n    loading: false,\r\n    errors:'',  \r\n}\r\n\r\nconst AddressTypesSlice = createSlice({\r\n    name : \"addressTypes\",\r\n    initialState,\r\n    reducers: {\r\n        setLoading : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload\r\n        },\r\n\r\n        setErrors :(state, {payload} : PayloadAction<string>) => {\r\n          state.errors = payload;\r\n        },\r\n\r\n        setAddressTypes :(state, {payload} : PayloadAction<AddressType[]>) => {\r\n          state.types = payload;\r\n        },   \r\n\r\n        updAddressType :(state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload;\r\n        }, \r\n\r\n        delAddressType :(state, {payload} : PayloadAction<string>) => {\r\n          state.types = state.types.filter(x => x.id !== payload)\r\n        }, \r\n    }\r\n});\r\n\r\nexport const { setLoading, setErrors, setAddressTypes, updAddressType, delAddressType } = AddressTypesSlice.actions;\r\n\r\nexport default AddressTypesSlice.reducer;\r\n\r\nexport const addressTypesSelector = (state: {addressTypes : AddressTypeState} ) => state.addressTypes;\r\n\r\nexport const getAddressTypes = (): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n      \r\n        const response = await axios.get(config.baseUrl.api  + ENDPOINTS.addressTypes.base)\r\n\r\n        dispatch(setAddressTypes(response.data));\r\n\r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const changeAddressType = (id : string, address: AddressType): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.put(config.baseUrl.api  + ENDPOINTS.addressTypes.base + `/${id}`, address )\r\n\r\n      dispatch(updAddressType(true));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAddressType = (id : string): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.addressTypes.base + `/${id}`)\r\n\r\n      dispatch(delAddressType(id));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\genericDialog\\dialog.tsx",[],["280","281"],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\employeeContacts\\Toolbar.tsx",["282","283","284","285","286"],"import React, { useEffect, useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { CircularProgress, Fab, FormControl, Grid,  InputLabel, Select, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Formik } from 'formik';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addCompanyAddress, addEmployeeContact } from '../../../../../../../features/companies/companySlice';\r\nimport { useParams } from 'react-router-dom';\r\nimport { CompanyAddress, EmployeeContact } from '../../../../../../../app/ITypes';\r\nimport { addressTypesSelector, getAddressTypes } from '../../../../../../../features/addressTypes/adrressTypesSlice';\r\nimport clsx from \"clsx\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { getContactTypes } from '../../../../../../../features/contactTypes/contactTypesSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      minWidth: 120\r\n    },\r\n    wrapper: {\r\n     \r\n        position: \"relative\"\r\n    },\r\n    buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        \"&:hover\": {\r\n            backgroundColor: green[700]\r\n        }\r\n    },\r\n    fabProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: -6,\r\n        left: -6,\r\n        zIndex: 1\r\n    },\r\n    buttonProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12\r\n    }\r\n  }));\r\n\r\ninterface ToolbarContactProps {\r\n    employeeId : string\r\n}\r\n\r\nconst Toolbar = (props: ToolbarContactProps) => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    let { id } = useParams();\r\n\r\n\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const addressTypes = useSelector(addressTypesSelector);\r\n\r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success\r\n    });\r\n\r\n    const onAddEmployeeContact = (values: EmployeeContact ) => {\r\n\r\n        setSuccess(false);\r\n        setSaveLoading(true);\r\n\r\n        const employeeContact : EmployeeContact = {\r\n          id :'',\r\n          addressType : values.addressType,\r\n          value : values.value,\r\n          isRemoved : values.isRemoved\r\n        }\r\n\r\n        setTimeout(() => {\r\n\r\n            dispatch(addEmployeeContact(id, props.employeeId, employeeContact));\r\n\r\n            setSuccess(true);\r\n            setSaveLoading(false);\r\n\r\n            setTimeout(() => {\r\n                setSuccess(false)\r\n            }, 1000);\r\n\r\n        }, 400);\r\n    }\r\n    \r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            \r\n              <Grid item xs={12}>\r\n                <Formik \r\n                    initialValues={{\r\n                        id : '',\r\n                        addressType : '',\r\n                        value : '',\r\n                        isRemoved : false\r\n                    }}\r\n                    validationSchema={\r\n                        Yup.object().shape({\r\n                            addressType: Yup.string().max(80).required('is required'),\r\n                            value : Yup.string().max(80).required('is required'),\r\n                           \r\n                        })}\r\n                    onSubmit={(values, actions) => {\r\n                        setTimeout(() => {\r\n\r\n                            actions.setSubmitting(false);\r\n\r\n                            onAddEmployeeContact(values)\r\n\r\n                            actions.resetForm({values : {\r\n                                id : '',\r\n                                addressType : '',\r\n                                value : '',\r\n                                isRemoved : false\r\n                            }})\r\n        \r\n                        }, 1000);\r\n                        \r\n                    }}>\r\n                    {({\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        touched,\r\n                        values\r\n                    }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item md={3} xs={12}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"addressType\">Types</InputLabel>\r\n                                    <Select\r\n                                        required\r\n                                        native\r\n                                        value={touched.addressType}\r\n                                        onChange={handleChange}\r\n                                        label=\"Tipo\"\r\n                                        inputProps={{\r\n                                            name: \"addressType\",\r\n                                            id: \"addressType\"\r\n                                        }}>\r\n                                        <option value=''></option> \r\n                                      {(addressTypes && addressTypes.types && addressTypes.types.length) > 0 ? (\r\n                                        addressTypes.types.map((type , index) => (\r\n                                            <option key={index} value={type.name}>{type.name}</option>\r\n                                        ))) : (                                       \r\n                                            <option value='No Data'>No Data</option>\r\n                                    )};\r\n                                \r\n                                </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={7} xs={12} className={classes.formControl}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    className={classes.formControl}\r\n                                    label=\"Indirizzo\"\r\n                                    name=\"value\"\r\n                                    inputProps={{\r\n                                        maxLength: 80\r\n                                    }}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    value={values.value}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={2} xs={12}>\r\n                                <div className={classes.wrapper}>\r\n                                    <Fab\r\n                                        aria-label=\"save\"\r\n                                        color=\"primary\"\r\n                                        className={buttonClassname}\r\n                                        type=\"submit\">\r\n                                        {success ? <CheckIcon /> : <SaveIcon />}\r\n                                    </Fab>\r\n                                    {(\r\n                                       saveLoading && <CircularProgress size={68} className={classes.fabProgress} />\r\n                                    )}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </form>\r\n                    )}\r\n                </Formik>\r\n              </Grid>\r\n        </Grid>\r\n      )\r\n}\r\n\r\nexport default Toolbar","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\employeeContacts\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeCompany\\employeeContacts\\DataGrid.tsx",["287","288"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport { EmployeeContact } from '../../../../../../../app/ITypes';\r\nimport ConfirmDialog from '../../../../../../../features/alert/dialog';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { delEmployeeContact } from '../../../../../../../features/companies/companySlice';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actions : {\r\n    maxWidth:'200px',\r\n    width:'20%',\r\n  },\r\n  wrapper: {\r\n     \r\n    position: \"relative\"\r\n  },\r\n  buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      \"&:hover\": {\r\n          backgroundColor: green[700]\r\n      }\r\n  },\r\n  fabProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: -6,\r\n      left: 1,\r\n      zIndex: 1\r\n  },\r\n  buttonProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      marginTop: -12,\r\n      marginLeft: -12\r\n  } \r\n}));\r\n\r\ninterface DataGridProps  {\r\n  employeeId : string\r\n  className? : string,\r\n  contacts? : EmployeeContact[],\r\n  loadingEmployee : boolean\r\n  loadingEmployeeContact : boolean\r\n}\r\n\r\ntype DialogInfoType = {\r\n  id : string,\r\n  open: boolean,\r\n  type: string,\r\n  value:string\r\n}\r\n\r\nconst DataGrid = ({ className, contacts, employeeId, loadingEmployee, loadingEmployeeContact, ...rest } : DataGridProps) => {\r\n  const classes = useStyles();\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [page, setPage] = useState(0);\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  // store selected item values to display id to delete\r\n  const [dialogInfo, setConfirmOpen] = useState<DialogInfoType>({open:false, id: '', type : '', value: ''});\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n \r\n  const OnDelEmployeeContact = () => {\r\n\r\n    const contactId = dialogInfo.id;\r\n    setTimeout(() => {\r\n\r\n        dispatch(delEmployeeContact(id, employeeId, contactId ));\r\n\r\n    }, 400);\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n      <ConfirmDialog\r\n          title=\"Delete Address?\"\r\n          open={dialogInfo.open}\r\n          setDialogOpen={setConfirmOpen}\r\n          onConfirm= {OnDelEmployeeContact}\r\n        >\r\n          Are you sure you want to delete this address? \r\n          <p>{dialogInfo.type} : {dialogInfo.value}</p> \r\n        \r\n        </ConfirmDialog>\r\n        <Box >\r\n          <Table>\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell width=\"20%\">\r\n                  Type\r\n                </TableCell>\r\n                <TableCell width=\"60%\">\r\n                  Value\r\n                </TableCell>\r\n                <TableCell width=\"20%\" align=\"center\">\r\n                  Actions\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n\r\n              {loadingEmployeeContact ?\r\n                (\r\n                <TableRow >\r\n                   <TableCell colSpan={6}>\r\n                      <CircularProgress color=\"secondary\" />\r\n                    </TableCell>\r\n                </TableRow> ) :\r\n                (\r\n                 contacts && contacts.length > 0 && contacts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((address, index) => (\r\n                  <TableRow hover key={index}>\r\n                    <TableCell width=\"20%\">\r\n                       {address.addressType}\r\n                    </TableCell>\r\n                    <TableCell width=\"60%\">\r\n                      {address.value}\r\n                    </TableCell>\r\n                    <TableCell className={classes.actions}>\r\n                      <IconButton key={index} aria-label=\"delete\" color=\"secondary\" onClick={() => setConfirmOpen({open:true, id:address.id, type:address.addressType, value: address.value})}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                     \r\n                    </TableCell>\r\n                  </TableRow>))\r\n              )}\r\n\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={contacts ? contacts.length : 0}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DataGrid;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\activityTypes\\activityTypesSlice.ts",["289","290"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { ActivityType, ReferenceBaseTypeState} from '../../app/ITypes';\r\nimport { AppThunk } from '../../app/store';\r\nimport { config } from '../../services/configs/config';\r\nimport { ENDPOINTS } from '../../services/constants/appEndpoints';\r\n\r\nexport interface ActivityTypeState extends ReferenceBaseTypeState {\r\n    types: ActivityType[];\r\n }\r\n\r\nconst initialState: ActivityTypeState = {\r\n    types: [],\r\n    loading: false,\r\n    errors:'',  \r\n}\r\n\r\nconst ActivityTypesSlice = createSlice({\r\n    name : \"activityTypes\",\r\n    initialState,\r\n    reducers: {\r\n        setLoading : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload\r\n        },\r\n\r\n        setErrors :(state, {payload} : PayloadAction<string>) => {\r\n          state.errors = payload;\r\n        },\r\n\r\n        setActivityTypes :(state, {payload} : PayloadAction<ActivityType[]>) => {\r\n          state.types = payload;\r\n        },   \r\n\r\n        updActivityType :(state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload;\r\n        }, \r\n\r\n        delActivityType :(state, {payload} : PayloadAction<string>) => {\r\n          state.types = state.types.filter(x => x.id !== payload)\r\n        }, \r\n    }\r\n});\r\n\r\nexport const { setLoading, setErrors, setActivityTypes, updActivityType, delActivityType } = ActivityTypesSlice.actions;\r\n\r\nexport default ActivityTypesSlice.reducer;\r\n\r\nexport const activityTypesSelector = (state: {activityTypes : ActivityTypeState} ) => state.activityTypes;\r\n\r\nexport const getActivityTypes = (): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n      \r\n        const response = await axios.get(config.baseUrl.api + ENDPOINTS.activityTypes.base)\r\n\r\n        dispatch(setActivityTypes(response.data));\r\n\r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const changeActivityType = (id : string, activity: ActivityType): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.put(config.baseUrl.api  + ENDPOINTS.activityTypes.base + `/${id}`, activity )\r\n\r\n      dispatch(updActivityType(true));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeActivityType = (id : string): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.delete(config.baseUrl.api + ENDPOINTS.activityTypes.base + `/${id}`)\r\n\r\n      dispatch(delActivityType(id));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\activityCompany\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\activityCompany\\Toolbar.tsx",["291","292"],"import React, { useEffect, useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { Checkbox, CircularProgress, Fab, FormControl, Grid,  InputLabel, Select, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Formik } from 'formik';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addCompanyActivity, } from '../../../../../../features/companies/companySlice';\r\nimport { useParams } from 'react-router-dom';\r\nimport { CompanyActivity } from '../../../../../../app/ITypes';\r\nimport clsx from \"clsx\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { activityTypesSelector } from '../../../../../../features/activityTypes/activityTypesSlice';\r\nimport { sectorTypesSelector } from '../../../../../../features/sectorTypes/sectorTypesSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      minWidth: 120\r\n    },\r\n    wrapper: {\r\n     \r\n        position: \"relative\"\r\n    },\r\n    buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        \"&:hover\": {\r\n            backgroundColor: green[700]\r\n        }\r\n    },\r\n    fabProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: -6,\r\n        left: -34.5,\r\n        zIndex: 1,\r\n        marginLeft:\"50%\"\r\n    },\r\n    buttonProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12\r\n    }\r\n  }));\r\n\r\n\r\nconst Toolbar = () => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    let { id } = useParams();\r\n\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const activityTypes = useSelector(activityTypesSelector);\r\n    const sectorTypes = useSelector(sectorTypesSelector);\r\n\r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success\r\n    });\r\n\r\n    const onAddActivity = (values: CompanyActivity ) => {\r\n\r\n        setSuccess(false);\r\n        setSaveLoading(true);\r\n\r\n        const companyActivity : CompanyActivity = {\r\n          id :'',\r\n          activityType : values.activityType,\r\n          sectorType : values.sectorType,\r\n          value : values.value,\r\n          isRemoved : values.isRemoved\r\n        }\r\n\r\n        console.log(companyActivity)\r\n\r\n        setTimeout(() => {\r\n\r\n            dispatch(addCompanyActivity(id, companyActivity));\r\n\r\n            setSuccess(true);\r\n            setSaveLoading(false);\r\n\r\n            setTimeout(() => {\r\n                setSuccess(false)\r\n            }, 1000);\r\n\r\n        }, 400);\r\n    }\r\n    \r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            \r\n              <Grid item xs={12}>\r\n                <Formik \r\n                    initialValues={{\r\n                        id : '',\r\n                        activityType : '',\r\n                        sectorType : '',\r\n                        value : false,\r\n                        isRemoved : false\r\n                    }}\r\n                    validationSchema={\r\n                        Yup.object().shape({\r\n                            activityType: Yup.string().max(80).required('is required'),\r\n                            sectorType: Yup.string().max(80).required('is required'),\r\n                            value : Yup.boolean().required('is required')\r\n                           \r\n                        })}\r\n                    onSubmit={(values, actions) => {\r\n                        setTimeout(() => {\r\n\r\n                            actions.setSubmitting(false);\r\n\r\n                            onAddActivity(values)\r\n\r\n                            actions.resetForm({values : {\r\n                                id : '',\r\n                                activityType : '',\r\n                                sectorType: '',\r\n                                value : false,\r\n                                isRemoved : false\r\n                            }})\r\n        \r\n                        }, 1000);\r\n                        \r\n                    }}>\r\n                    {({\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        touched,\r\n                        values\r\n                    }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item md={3} xs={12}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"activityType\">Activities</InputLabel>\r\n                                    <Select\r\n                                        required\r\n                                        native\r\n                                        value={touched.activityType}\r\n                                        onChange={handleChange}\r\n                                        label=\"Tipo\"\r\n                                        inputProps={{\r\n                                            name: \"activityType\",\r\n                                            id: \"activityType\"\r\n                                        }}>\r\n                                        <option value=''></option> \r\n                                      {(activityTypes && activityTypes.types && activityTypes.types.length) > 0 ? (\r\n                                        activityTypes.types.map((type , index) => (\r\n                                            <option key={index} value={type.name}>{type.name}</option>\r\n                                        ))) : (                                       \r\n                                            <option value='No Data'>No Data</option>\r\n                                    )};\r\n                                \r\n                                </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={3} xs={12}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"sectorType\">Sectors</InputLabel>\r\n                                    <Select\r\n                                        required\r\n                                        native\r\n                                        value={touched.sectorType}\r\n                                        onChange={handleChange}\r\n                                        label=\"Tipo\"\r\n                                        inputProps={{\r\n                                            name: \"sectorType\",\r\n                                            id: \"sectorType\"\r\n                                        }}>\r\n                                        <option value=''></option> \r\n                                      {(sectorTypes && sectorTypes.types && sectorTypes.types.length) > 0 ? (\r\n                                        sectorTypes.types.map((type , index) => (\r\n                                            <option key={index} value={type.name}>{type.name}</option>\r\n                                        ))) : (                                       \r\n                                            <option value='No Data'>No Data</option>\r\n                                    )};\r\n                                \r\n                                </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={3} xs={12} className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"sectorType\">Active</InputLabel>\r\n                                <Checkbox\r\n                                    required\r\n                                    className={classes.formControl}\r\n                                   \r\n                                    name=\"value\"\r\n                                 \r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    checked={values.value}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={2} xs={12}>\r\n                                <div className={classes.wrapper}>\r\n                                    <Fab\r\n                                        aria-label=\"save\"\r\n                                        color=\"primary\"\r\n                                        className={buttonClassname}\r\n                                        type=\"submit\">\r\n                                        {success ? <CheckIcon /> : <SaveIcon />}\r\n                                    </Fab>\r\n                                    {(\r\n                                       saveLoading && <CircularProgress size={68} className={classes.fabProgress} />\r\n                                    )}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </form>\r\n                    )}\r\n                </Formik>\r\n              </Grid>\r\n        </Grid>\r\n      )\r\n}\r\n\r\nexport default Toolbar\r\n\r\n\r\n",["293","294"],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\activityCompany\\DataGrid.tsx",["295","296"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport { CompanyActivity } from '../../../../../../app/ITypes';\r\nimport ConfirmDialog from '../../../../../../features/alert/dialog';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport { delCompanyActivity } from '../../../../../../features/companies/companySlice';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actions : {\r\n    maxWidth:'200px',\r\n    width:'20%',\r\n  },\r\n  wrapper: {\r\n     \r\n    position: \"relative\"\r\n  },\r\n  buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      \"&:hover\": {\r\n          backgroundColor: green[700]\r\n      }\r\n  },\r\n  fabProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: -6,\r\n      left: 1,\r\n      zIndex: 1\r\n  },\r\n  buttonProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      marginTop: -12,\r\n      marginLeft: -12\r\n  } \r\n}));\r\n\r\ntype DataGridProps = {\r\n  className? : string,\r\n  activities? : CompanyActivity[],\r\n  loading : boolean,\r\n  loadingActivity : boolean\r\n}\r\n\r\ntype DialogInfoType = {\r\n  id : string,\r\n  open: boolean,\r\n  type: string,\r\n  value:string\r\n}\r\n\r\nconst ActivityDataGrid = ({ className, activities, loading, loadingActivity, ...rest } : DataGridProps) => {\r\n  const classes = useStyles();\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [page, setPage] = useState(0);\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  // store selected item values to display id to delete\r\n  const [dialogInfo, setConfirmOpen] = useState<DialogInfoType>({open:false, id: '', type : '', value: ''});\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n \r\n  const OnDelActivity = () => {\r\n\r\n    const activityId = dialogInfo.id;\r\n    setTimeout(() => {\r\n\r\n        dispatch(delCompanyActivity(id, activityId));\r\n\r\n    }, 400);\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n      <ConfirmDialog\r\n          title=\"Delete Activity?\"\r\n          open={dialogInfo.open}\r\n          setDialogOpen={setConfirmOpen}\r\n          onConfirm= {OnDelActivity}\r\n        >\r\n          Are you sure you want to delete this activity? \r\n          <p>{dialogInfo.type} : {dialogInfo.value}</p> \r\n        \r\n        </ConfirmDialog>\r\n        <Box >\r\n          <Table>\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell width=\"40%\">\r\n                  Activity\r\n                </TableCell>\r\n                <TableCell width=\"40%\">\r\n                  Sector\r\n                </TableCell>\r\n                <TableCell width=\"10%\">\r\n                  Status\r\n                </TableCell>\r\n                <TableCell width=\"10%\" align=\"center\">\r\n                  Actions\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n\r\n              {loadingActivity ?\r\n                (\r\n                <TableRow >\r\n                   <TableCell colSpan={6}>\r\n                      <CircularProgress color=\"secondary\" />\r\n                    </TableCell>\r\n                </TableRow> ) :\r\n                (\r\n                  activities && activities.length > 0 && activities.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((activity, index) => (\r\n                  <TableRow hover key={index}>\r\n                    <TableCell width=\"40%\">\r\n                       {activity.activityType}\r\n                    </TableCell>\r\n                    <TableCell width=\"40%\">\r\n                       {activity.sectorType}\r\n                    </TableCell>\r\n                    <TableCell width=\"10%\">\r\n                     { activity.value ? (\r\n                      <DoneIcon style={{ color: green[500] }}></DoneIcon>\r\n                     ) : (\r\n                      <ClearIcon style={{ color: red[500] }}></ClearIcon>\r\n                     )}\r\n                      \r\n                    </TableCell>\r\n                    <TableCell className={classes.actions}>\r\n                      <IconButton key={index} aria-label=\"delete\" color=\"secondary\" onClick={() => setConfirmOpen({open:true, id:activity.id, type:activity.activityType, value: activity.sectorType})}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                     \r\n                    </TableCell>\r\n                  </TableRow>))\r\n              )}\r\n\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={activities ? activities.length : 0}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ActivityDataGrid;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\sectorTypes\\sectorTypesSlice.ts",["297","298"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport {  ReferenceBaseTypeState, SectorType} from '../../app/ITypes';\r\nimport { AppThunk } from '../../app/store';\r\nimport { config } from '../../services/configs/config';\r\nimport { ENDPOINTS } from '../../services/constants/appEndpoints';\r\n\r\nexport interface SectorTypeState extends ReferenceBaseTypeState {\r\n    types: SectorType[];\r\n }\r\n\r\nconst initialState: SectorTypeState = {\r\n    types: [],\r\n    loading: false,\r\n    errors:'',  \r\n}\r\n\r\nconst SectorTypesSlice = createSlice({\r\n    name : \"sectorTypes\",\r\n    initialState,\r\n    reducers: {\r\n        setLoading : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload\r\n        },\r\n\r\n        setErrors :(state, {payload} : PayloadAction<string>) => {\r\n          state.errors = payload;\r\n        },\r\n\r\n        setSectorTypes :(state, {payload} : PayloadAction<SectorType[]>) => {\r\n          state.types = payload;\r\n        },   \r\n\r\n        updSectorType :(state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload;\r\n        }, \r\n\r\n        delSectorType :(state, {payload} : PayloadAction<string>) => {\r\n          state.types = state.types.filter(x => x.id !== payload)\r\n        }, \r\n    }\r\n});\r\n\r\nexport const { setLoading, setErrors, setSectorTypes, updSectorType, delSectorType } = SectorTypesSlice.actions;\r\n\r\nexport default SectorTypesSlice.reducer;\r\n\r\nexport const sectorTypesSelector = (state: {sectorTypes : SectorTypeState} ) => state.sectorTypes;\r\n\r\nexport const getSectorTypes = (): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n      \r\n        const response = await axios.get(config.baseUrl.api  + ENDPOINTS.sectorTypes.base)\r\n\r\n        dispatch(setSectorTypes(response.data));\r\n\r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const changeSectorType = (id : string, Sector: SectorType): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.put(config.baseUrl.api  + ENDPOINTS.sectorTypes.base + `/${id}`, Sector )\r\n\r\n      dispatch(updSectorType(true));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeSectorType = (id : string): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.sectorTypes.base + `/${id}`)\r\n\r\n      dispatch(delSectorType(id));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\dimensionCompany\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\dimensionTypes\\dimensionTypesSlice.ts",["299","300"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { DimensionType, ReferenceBaseTypeState} from '../../app/ITypes';\r\nimport { AppThunk } from '../../app/store';\r\nimport { config } from '../../services/configs/config';\r\nimport { ENDPOINTS } from '../../services/constants/appEndpoints';\r\n\r\nexport interface DimensionTypeState extends ReferenceBaseTypeState {\r\n    types: DimensionType[];\r\n }\r\n\r\nconst initialState: DimensionTypeState = {\r\n    types: [],\r\n    loading: false,\r\n    errors:'',  \r\n}\r\n\r\nconst DimensionTypesSlice = createSlice({\r\n    name : \"dimensionTypes\",\r\n    initialState,\r\n    reducers: {\r\n        setLoading : (state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload\r\n        },\r\n\r\n        setErrors :(state, {payload} : PayloadAction<string>) => {\r\n          state.errors = payload;\r\n        },\r\n\r\n        setDimensionTypes :(state, {payload} : PayloadAction<DimensionType[]>) => {\r\n          state.types = payload;\r\n        },   \r\n\r\n        updDimensionType :(state, {payload} : PayloadAction<boolean>) => {\r\n          state.loading = payload;\r\n        }, \r\n\r\n        delDimensionType :(state, {payload} : PayloadAction<string>) => {\r\n          state.types = state.types.filter(x => x.id !== payload)\r\n        }, \r\n    }\r\n});\r\n\r\nexport const { setLoading, setErrors, setDimensionTypes, updDimensionType, delDimensionType } = DimensionTypesSlice.actions;\r\n\r\nexport default DimensionTypesSlice.reducer;\r\n\r\nexport const dimensionTypesSelector = (state: {dimensionTypes : DimensionTypeState} ) => state.dimensionTypes;\r\n\r\nexport const getDimensionTypes = (): AppThunk => {\r\n    return async (dispatch) => {\r\n\r\n      dispatch(setLoading(true));\r\n\r\n      try {\r\n      \r\n        const response = await axios.get(config.baseUrl.api  + ENDPOINTS.dimensionTypes.base)\r\n\r\n        dispatch(setDimensionTypes(response.data));\r\n\r\n        dispatch(setLoading(false));\r\n\r\n      } catch (error) {\r\n        dispatch(setErrors(error.message));\r\n\r\n        dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const changeDimensionType = (id : string, activity: DimensionType): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.put(config.baseUrl.api  + ENDPOINTS.dimensionTypes.base + `/${id}`, activity )\r\n\r\n      dispatch(updDimensionType(true));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeDimensionType = (id : string): AppThunk => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n   \r\n      const response = await axios.delete(config.baseUrl.api  + ENDPOINTS.dimensionTypes.base + `/${id}`)\r\n\r\n      dispatch(delDimensionType(id));\r\n\r\n      toast.success(\"YOO, YOU ROCKZ\");\r\n\r\n      dispatch(setLoading(false));\r\n\r\n    } catch (error) {\r\n      dispatch(setErrors(error.message));\r\n\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\dimensionCompany\\DataGrid.tsx",["301"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  makeStyles,\r\n  CircularProgress,\r\n\r\n} from '@material-ui/core';\r\nimport {  CompanyDimension } from '../../../../../../app/ITypes';\r\nimport ConfirmDialog from '../../../../../../features/alert/dialog';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport {  delCompanyDimension } from '../../../../../../features/companies/companySlice';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actions : {\r\n    maxWidth:'200px',\r\n    width:'20%',\r\n  },\r\n  wrapper: {\r\n     \r\n    position: \"relative\"\r\n  },\r\n  buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      \"&:hover\": {\r\n          backgroundColor: green[700]\r\n      }\r\n  },\r\n  fabProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: -6,\r\n      left: 1,\r\n      zIndex: 1\r\n  },\r\n  buttonProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      marginTop: -12,\r\n      marginLeft: -12\r\n  } \r\n}));\r\n\r\ninterface DataGridProps {\r\n  className? : string,\r\n  dimensions? : CompanyDimension[],\r\n  loading : boolean,\r\n  loadingDimension : boolean\r\n}\r\n\r\ntype DialogInfoType = {\r\n  id : string,\r\n  open: boolean,\r\n  type: string,\r\n  value?:number\r\n}\r\n\r\nconst DimensionDataGrid = ({ className, dimensions, loading, loadingDimension, ...rest } : DataGridProps) => {\r\n  const classes = useStyles();\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [page, setPage] = useState(0);\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  // store selected item values to display id to delete\r\n  const [dialogInfo, setConfirmOpen] = useState<DialogInfoType>({open:false, id: '', type : '', value: 0});\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n \r\n  const OnDelDimension = () => {\r\n\r\n    const dimensionId = dialogInfo.id;\r\n    setTimeout(() => {\r\n\r\n        dispatch(delCompanyDimension(id, dimensionId));\r\n\r\n    }, 400);\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n      <ConfirmDialog\r\n          title=\"Delete Dimension?\"\r\n          open={dialogInfo.open}\r\n          setDialogOpen={setConfirmOpen}\r\n          onConfirm= {OnDelDimension}\r\n        >\r\n          Are you sure you want to delete this activity? \r\n          <p>{dialogInfo.type} : {dialogInfo.value}</p> \r\n        \r\n        </ConfirmDialog>\r\n        <Box >\r\n          <Table>\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell width=\"60%\">\r\n                  DImension\r\n                </TableCell>\r\n                <TableCell width=\"30%\">\r\n                  Fee\r\n                </TableCell>\r\n                <TableCell width=\"10%\" align=\"center\">\r\n                  Actions\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n\r\n              {loadingDimension ?\r\n                (\r\n                <TableRow >\r\n                   <TableCell colSpan={6}>\r\n                      <CircularProgress color=\"secondary\" />\r\n                    </TableCell>\r\n                </TableRow> ) :\r\n                (\r\n                  dimensions && dimensions.length > 0 && dimensions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((dimension, index) => (\r\n                  <TableRow hover key={index}>\r\n                    <TableCell width=\"60%\">\r\n                       {dimension.dimensionType}\r\n                    </TableCell>\r\n                    <TableCell width=\"40%\">\r\n                       {dimension.fee}\r\n                    </TableCell>\r\n                    <TableCell className={classes.actions}>\r\n                      <IconButton key={index} aria-label=\"delete\" color=\"secondary\" onClick={() => setConfirmOpen({open:true, id:dimension.id, type:dimension.dimensionType, value: dimension.fee})}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                     \r\n                    </TableCell>\r\n                  </TableRow>))\r\n              )}\r\n\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={dimensions ? dimensions.length : 0}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DimensionDataGrid;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\dimensionCompany\\Toolbar.tsx",["302","303"],"import React, {  useEffect, useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport {  CircularProgress, Fab, FormControl, Grid,  InputLabel, Select, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Formik } from 'formik';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addCompanyDimension } from '../../../../../../features/companies/companySlice';\r\nimport { useParams } from 'react-router-dom';\r\nimport { CompanyDimension, DimensionType } from '../../../../../../app/ITypes';\r\nimport clsx from \"clsx\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { dimensionTypesSelector, DimensionTypeState } from '../../../../../../features/dimensionTypes/dimensionTypesSlice';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      minWidth: 120\r\n    },\r\n    wrapper: {\r\n     \r\n        position: \"relative\"\r\n    },\r\n    buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        \"&:hover\": {\r\n            backgroundColor: green[700]\r\n        }\r\n    },\r\n    fabProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: -6,\r\n        left: -34.5,\r\n        zIndex: 1,\r\n        marginLeft:\"50%\"\r\n    },\r\n    buttonProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12\r\n    }\r\n  }));\r\n\r\n\r\ninterface ToolBarProps {\r\n    loading : boolean,\r\n    loadingDimension : boolean,\r\n    subScriptionType : string\r\n}\r\n  \r\nconst Toolbar = (props : ToolBarProps) => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    let { id } = useParams();\r\n\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const dimensionTypes = useSelector(dimensionTypesSelector);\r\n    const dimensionTypeForContractType : DimensionType[] = dimensionTypes.types.filter(x => x.contractType === props.subScriptionType);\r\n\r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success\r\n    });\r\n\r\n    const onAddADimension = (values: CompanyDimension) => {\r\n\r\n        setSuccess(false);\r\n        setSaveLoading(true);\r\n\r\n        const companyDimension : CompanyDimension = {\r\n          id :'',\r\n          dimensionType : values.dimensionType,\r\n          fee : values.fee,\r\n          isRemoved : values.isRemoved\r\n        }\r\n\r\n        setTimeout(() => {\r\n\r\n            dispatch(addCompanyDimension(id, companyDimension));\r\n\r\n            setSuccess(true);\r\n            setSaveLoading(false);\r\n\r\n            setTimeout(() => {\r\n                setSuccess(false)\r\n            }, 1000);\r\n\r\n        }, 400);\r\n    }\r\n    \r\n    return (\r\n        <Grid container spacing={3}>\r\n            \r\n              <Grid item xs={12}>\r\n              <Formik \r\n                    initialValues={{\r\n                        id : '',\r\n                        dimensionType : '',\r\n                        fee : 0,\r\n                        isRemoved : false\r\n                    }}\r\n                    validationSchema={\r\n                        Yup.object().shape({\r\n                            dimensionType: Yup.string().max(80).required('is required'),\r\n                            fee : Yup.number().min(50,'min fee is 50').required('is required')\r\n                        })}\r\n                        \r\n                    onSubmit={(values, actions) => {\r\n                        setTimeout(() => {\r\n\r\n                            actions.setSubmitting(false);\r\n\r\n                            console.log(values)\r\n\r\n                            onAddADimension(values)\r\n\r\n                            actions.resetForm({values : {\r\n                                id : '',\r\n                                dimensionType : '',\r\n                                fee : 0,\r\n                                isRemoved : false\r\n                            }})\r\n        \r\n                        }, 1000);\r\n                    }} \r\n                    >\r\n                    {({\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        setFieldValue,\r\n                        touched,\r\n                        values\r\n                    }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item md={7} xs={12}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"dimensionType\">Dimension</InputLabel>\r\n                                    <Select\r\n                                        required\r\n                                        native\r\n                                        value={values.dimensionType}\r\n                                        onChange={async e => {\r\n                                            const dimension = dimensionTypes.types.find(({name}) => name === e.target.value);\r\n                                        // check why lose the selection\r\n                                            if (dimension !== undefined){\r\n                                                setFieldValue(\"dimensionType\", dimension.name);\r\n                                                setFieldValue(\"fee\", dimension.fee);\r\n                                            }\r\n                                          }}\r\n                                        label=\"Tipo\"\r\n                                        inputProps={{\r\n                                            name: \"dimensionType\",\r\n                                            id: \"dimensionType\"\r\n                                        }}>\r\n                                        <option value=''></option> \r\n                                        {(dimensionTypeForContractType && dimensionTypeForContractType.length > 0) ? (dimensionTypeForContractType.map((type , index) => (\r\n                                            <option key={index} value={type.name}>{type.name}</option>\r\n                                        ))) : (                                       \r\n                                            <option value='No Data'>No Data</option>\r\n                                        )};                             \r\n                                </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={3} xs={12} className={classes.formControl}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    className={classes.formControl}\r\n                                    label=\"Fee\"\r\n                                    name=\"fee\"\r\n                                    type=\"number\"\r\n                                    inputProps={{\r\n                                        maxLength: 80\r\n                                    }}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    value={values.fee}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={2} xs={12}>\r\n                                <div className={classes.wrapper}>\r\n                                    <Fab\r\n                                        aria-label=\"save\"\r\n                                        color=\"primary\"\r\n                                        className={buttonClassname}\r\n                                        type=\"submit\">\r\n                                        {success ? <CheckIcon /> : <SaveIcon />}\r\n                                    </Fab>\r\n                                    {(\r\n                                       saveLoading && <CircularProgress size={68} className={classes.fabProgress} />\r\n                                    )}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </form>\r\n                    )}\r\n                </Formik>\r\n              </Grid>\r\n        </Grid>\r\n      )\r\n}\r\n\r\nexport default Toolbar\r\n\r\n\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeOverViewCompany\\index.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeOverViewCompany\\Toolbar.tsx",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\views\\Company\\EditView\\components\\components\\employeeOverViewCompany\\DataGrid.tsx",["304","305"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport { CompanyEmployeesOverView } from '../../../../../../app/ITypes';\r\nimport ConfirmDialog from '../../../../../../features/alert/dialog';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { delCompanyEmployeesOverView } from '../../../../../../features/companies/companySlice';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actions : {\r\n    maxWidth:'200px',\r\n    width:'20%',\r\n  },\r\n  wrapper: {\r\n     \r\n    position: \"relative\"\r\n  },\r\n  buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      \"&:hover\": {\r\n          backgroundColor: green[700]\r\n      }\r\n  },\r\n  fabProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: -6,\r\n      left: 1,\r\n      zIndex: 1\r\n  },\r\n  buttonProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      marginTop: -12,\r\n      marginLeft: -12\r\n  } \r\n}));\r\n\r\ntype DataGridProps = {\r\n  className? : string,\r\n  employeesOverViews? : CompanyEmployeesOverView[],\r\n  loading : boolean,\r\n  loadingEmployeesOverView : boolean\r\n}\r\n\r\ntype DialogInfoType = {\r\n  id : string,\r\n  open: boolean,\r\n  type: string,\r\n  value?:number\r\n}\r\n\r\nconst AddressDataGrid = ({ className, employeesOverViews, loading, loadingEmployeesOverView, ...rest } : DataGridProps) => {\r\n  const classes = useStyles();\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [page, setPage] = useState(0);\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  // store selected item values to display id to delete\r\n  const [dialogInfo, setConfirmOpen] = useState<DialogInfoType>({open:false, id: '', type : '', value: undefined});\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n \r\n  const OnDelAddress = () => {\r\n\r\n    const employeesOverViewId = dialogInfo.id;\r\n    setTimeout(() => {\r\n\r\n        dispatch(delCompanyEmployeesOverView(id, employeesOverViewId));\r\n\r\n    }, 400);\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n      <ConfirmDialog\r\n          title=\"Delete Address?\"\r\n          open={dialogInfo.open}\r\n          setDialogOpen={setConfirmOpen}\r\n          onConfirm= {OnDelAddress}\r\n        >\r\n          Are you sure you want to delete this address? \r\n          <p>{dialogInfo.type} : {dialogInfo.value}</p> \r\n        \r\n        </ConfirmDialog>\r\n        <Box >\r\n          <Table>\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell width=\"20%\">\r\n                  Contract Type\r\n                </TableCell>\r\n                <TableCell width=\"60%\">\r\n                  Employees\r\n                </TableCell>\r\n                <TableCell width=\"20%\" align=\"center\">\r\n                  Actions\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n\r\n              {loadingEmployeesOverView ?\r\n                (\r\n                <TableRow >\r\n                   <TableCell colSpan={6}>\r\n                      <CircularProgress color=\"secondary\" />\r\n                    </TableCell>\r\n                </TableRow> ) :\r\n                (\r\n                  employeesOverViews && employeesOverViews.length > 0 && employeesOverViews.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((employeesOverView, index) => (\r\n                  <TableRow hover key={index}>\r\n                    <TableCell width=\"20%\">\r\n                       {employeesOverView.contractLevelType}\r\n                    </TableCell>\r\n                    <TableCell width=\"60%\">\r\n                      {employeesOverView.employees}\r\n                    </TableCell>\r\n                    <TableCell className={classes.actions}>\r\n                      <IconButton key={index} aria-label=\"delete\" color=\"secondary\" onClick={() => setConfirmOpen({open:true, id:employeesOverView.id, type:employeesOverView.contractLevelType, value: employeesOverView.employees})}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                     \r\n                    </TableCell>\r\n                  </TableRow>))\r\n              )}\r\n\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={employeesOverViews ? employeesOverViews.length : 0}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddressDataGrid;\r\n","C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\features\\filters\\filtersSlice.ts",[],"C:\\Progetti\\agcrm\\Ag_Crm_FE\\dashboard\\src\\services\\configs\\config.tsx",[],{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","replacedBy":"309"},{"ruleId":"306","replacedBy":"310"},{"ruleId":"308","replacedBy":"311"},{"ruleId":"312","severity":1,"message":"313","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":27},{"ruleId":"312","severity":1,"message":"316","line":111,"column":9,"nodeType":"314","messageId":"315","endLine":111,"endColumn":25},{"ruleId":"317","severity":1,"message":"318","line":5,"column":35,"nodeType":"319","messageId":"320","endLine":5,"endColumn":69,"fix":"321"},{"ruleId":"322","severity":1,"message":"323","line":106,"column":68,"nodeType":"324","messageId":"325","endLine":106,"endColumn":70},{"ruleId":"322","severity":1,"message":"326","line":118,"column":52,"nodeType":"324","messageId":"325","endLine":118,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":125,"column":63,"nodeType":"324","messageId":"325","endLine":125,"endColumn":65},{"ruleId":"322","severity":1,"message":"326","line":126,"column":30,"nodeType":"324","messageId":"325","endLine":126,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":131,"column":70,"nodeType":"324","messageId":"325","endLine":131,"endColumn":72},{"ruleId":"322","severity":1,"message":"323","line":147,"column":63,"nodeType":"324","messageId":"325","endLine":147,"endColumn":65},{"ruleId":"322","severity":1,"message":"326","line":148,"column":30,"nodeType":"324","messageId":"325","endLine":148,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":153,"column":70,"nodeType":"324","messageId":"325","endLine":153,"endColumn":72},{"ruleId":"322","severity":1,"message":"323","line":169,"column":63,"nodeType":"324","messageId":"325","endLine":169,"endColumn":65},{"ruleId":"322","severity":1,"message":"326","line":170,"column":30,"nodeType":"324","messageId":"325","endLine":170,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":175,"column":70,"nodeType":"324","messageId":"325","endLine":175,"endColumn":72},{"ruleId":"322","severity":1,"message":"323","line":191,"column":63,"nodeType":"324","messageId":"325","endLine":191,"endColumn":65},{"ruleId":"322","severity":1,"message":"326","line":192,"column":30,"nodeType":"324","messageId":"325","endLine":192,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":197,"column":70,"nodeType":"324","messageId":"325","endLine":197,"endColumn":72},{"ruleId":"322","severity":1,"message":"323","line":213,"column":63,"nodeType":"324","messageId":"325","endLine":213,"endColumn":65},{"ruleId":"322","severity":1,"message":"326","line":214,"column":30,"nodeType":"324","messageId":"325","endLine":214,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":219,"column":70,"nodeType":"324","messageId":"325","endLine":219,"endColumn":72},{"ruleId":"312","severity":1,"message":"327","line":292,"column":15,"nodeType":"314","messageId":"315","endLine":292,"endColumn":23},{"ruleId":"312","severity":1,"message":"327","line":315,"column":13,"nodeType":"314","messageId":"315","endLine":315,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":338,"column":13,"nodeType":"314","messageId":"315","endLine":338,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":389,"column":13,"nodeType":"314","messageId":"315","endLine":389,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":411,"column":13,"nodeType":"314","messageId":"315","endLine":411,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":460,"column":13,"nodeType":"314","messageId":"315","endLine":460,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":482,"column":13,"nodeType":"314","messageId":"315","endLine":482,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":531,"column":13,"nodeType":"314","messageId":"315","endLine":531,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":553,"column":13,"nodeType":"314","messageId":"315","endLine":553,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":602,"column":13,"nodeType":"314","messageId":"315","endLine":602,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":624,"column":13,"nodeType":"314","messageId":"315","endLine":624,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":674,"column":13,"nodeType":"314","messageId":"315","endLine":674,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":696,"column":13,"nodeType":"314","messageId":"315","endLine":696,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":719,"column":13,"nodeType":"314","messageId":"315","endLine":719,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":743,"column":13,"nodeType":"314","messageId":"315","endLine":743,"endColumn":21},{"ruleId":"317","severity":1,"message":"328","line":13,"column":34,"nodeType":"329","messageId":"320","endLine":13,"endColumn":62,"fix":"330"},{"ruleId":"312","severity":1,"message":"331","line":15,"column":46,"nodeType":"314","messageId":"315","endLine":15,"endColumn":73},{"ruleId":"332","severity":1,"message":"333","line":68,"column":6,"nodeType":"334","endLine":68,"endColumn":16,"suggestions":"335"},{"ruleId":"336","severity":1,"message":"337","line":32,"column":7,"nodeType":"314","messageId":"338","endLine":32,"endColumn":14},{"ruleId":"312","severity":1,"message":"339","line":8,"column":10,"nodeType":"314","messageId":"315","endLine":8,"endColumn":19},{"ruleId":"312","severity":1,"message":"340","line":2,"column":13,"nodeType":"314","messageId":"315","endLine":2,"endColumn":16},{"ruleId":"312","severity":1,"message":"341","line":15,"column":3,"nodeType":"314","messageId":"315","endLine":15,"endColumn":9},{"ruleId":"312","severity":1,"message":"342","line":16,"column":3,"nodeType":"314","messageId":"315","endLine":16,"endColumn":9},{"ruleId":"312","severity":1,"message":"343","line":18,"column":3,"nodeType":"314","messageId":"315","endLine":18,"endColumn":13},{"ruleId":"312","severity":1,"message":"344","line":28,"column":23,"nodeType":"314","messageId":"315","endLine":28,"endColumn":34},{"ruleId":"322","severity":1,"message":"323","line":168,"column":54,"nodeType":"324","messageId":"325","endLine":168,"endColumn":56},{"ruleId":"322","severity":1,"message":"323","line":188,"column":63,"nodeType":"324","messageId":"325","endLine":188,"endColumn":65},{"ruleId":"312","severity":1,"message":"345","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":26},{"ruleId":"312","severity":1,"message":"346","line":11,"column":32,"nodeType":"314","messageId":"315","endLine":11,"endColumn":47},{"ruleId":"312","severity":1,"message":"341","line":15,"column":3,"nodeType":"314","messageId":"315","endLine":15,"endColumn":9},{"ruleId":"312","severity":1,"message":"344","line":24,"column":23,"nodeType":"314","messageId":"315","endLine":24,"endColumn":34},{"ruleId":"312","severity":1,"message":"327","line":80,"column":13,"nodeType":"314","messageId":"315","endLine":80,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":104,"column":13,"nodeType":"314","messageId":"315","endLine":104,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":80,"column":13,"nodeType":"314","messageId":"315","endLine":80,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":104,"column":13,"nodeType":"314","messageId":"315","endLine":104,"endColumn":21},{"ruleId":"306","replacedBy":"347"},{"ruleId":"308","replacedBy":"348"},{"ruleId":"312","severity":1,"message":"345","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":26},{"ruleId":"312","severity":1,"message":"349","line":8,"column":10,"nodeType":"314","messageId":"315","endLine":8,"endColumn":27},{"ruleId":"312","severity":1,"message":"350","line":10,"column":10,"nodeType":"314","messageId":"315","endLine":10,"endColumn":24},{"ruleId":"312","severity":1,"message":"346","line":11,"column":32,"nodeType":"314","messageId":"315","endLine":11,"endColumn":47},{"ruleId":"312","severity":1,"message":"351","line":15,"column":10,"nodeType":"314","messageId":"315","endLine":15,"endColumn":25},{"ruleId":"312","severity":1,"message":"341","line":15,"column":3,"nodeType":"314","messageId":"315","endLine":15,"endColumn":9},{"ruleId":"312","severity":1,"message":"344","line":24,"column":23,"nodeType":"314","messageId":"315","endLine":24,"endColumn":34},{"ruleId":"312","severity":1,"message":"327","line":80,"column":13,"nodeType":"314","messageId":"315","endLine":80,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":104,"column":13,"nodeType":"314","messageId":"315","endLine":104,"endColumn":21},{"ruleId":"312","severity":1,"message":"345","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":26},{"ruleId":"312","severity":1,"message":"352","line":3,"column":83,"nodeType":"314","messageId":"315","endLine":3,"endColumn":92},{"ruleId":"306","replacedBy":"353"},{"ruleId":"308","replacedBy":"354"},{"ruleId":"312","severity":1,"message":"341","line":15,"column":3,"nodeType":"314","messageId":"315","endLine":15,"endColumn":9},{"ruleId":"312","severity":1,"message":"344","line":24,"column":23,"nodeType":"314","messageId":"315","endLine":24,"endColumn":34},{"ruleId":"312","severity":1,"message":"327","line":80,"column":13,"nodeType":"314","messageId":"315","endLine":80,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":104,"column":13,"nodeType":"314","messageId":"315","endLine":104,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":80,"column":13,"nodeType":"314","messageId":"315","endLine":80,"endColumn":21},{"ruleId":"312","severity":1,"message":"327","line":104,"column":13,"nodeType":"314","messageId":"315","endLine":104,"endColumn":21},{"ruleId":"312","severity":1,"message":"355","line":19,"column":17,"nodeType":"314","messageId":"315","endLine":19,"endColumn":20},{"ruleId":"312","severity":1,"message":"345","line":1,"column":18,"nodeType":"314","messageId":"315","endLine":1,"endColumn":27},{"ruleId":"312","severity":1,"message":"356","line":14,"column":34,"nodeType":"314","messageId":"315","endLine":14,"endColumn":52},{"ruleId":"312","severity":1,"message":"341","line":15,"column":3,"nodeType":"314","messageId":"315","endLine":15,"endColumn":9},{"ruleId":"312","severity":1,"message":"344","line":24,"column":23,"nodeType":"314","messageId":"315","endLine":24,"endColumn":34},"no-native-reassign",["357"],"no-negated-in-lhs",["358"],["357"],["358"],"@typescript-eslint/no-unused-vars","'forwardRef' is defined but never used.","Identifier","unusedVar","'fixedHeightPaper' is assigned a value but never used.","no-useless-rename","Import EmployeeContact unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"359","text":"360"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'response' is assigned a value but never used.","Destructuring assignment setDialogOpen unnecessarily renamed.","Property",{"range":"361","text":"362"},"'getCompanyEmployeesOverView' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["363"],"@typescript-eslint/no-redeclare","'Toolbar' is already defined.","redeclared","'useParams' is defined but never used.","'Yup' is defined but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","'Typography' is defined but never used.","'useSelector' is defined but never used.","'useEffect' is defined but never used.","'getAddressTypes' is defined but never used.",["357"],["358"],"'addCompanyAddress' is defined but never used.","'CompanyAddress' is defined but never used.","'getContactTypes' is defined but never used.","'TextField' is defined but never used.",["357"],["358"],"'red' is defined but never used.","'DimensionTypeState' is defined but never used.","no-global-assign","no-unsafe-negation",[168,202],"EmployeeContact",[365,393],"setDialogOpen",{"desc":"364","fix":"365"},"Update the dependencies array to be: [dispatch, id]",{"range":"366","text":"367"},[1967,1977],"[dispatch, id]"]